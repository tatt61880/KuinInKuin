#exe
var actions: list<func<()>>

func[d0001.knd, _init]_init()
end func

func[d0001.knd, _fin]_fin()
end func

+enum Anchor
	fix
	move
	scale
end enum

+class Btn(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _wndGetText]getText(): []char
	end func
	
	+func[d0001.knd, _wndSetText]setText(text: []char)
	end func
	
	+var onPush: func<(@WndBase)>
end class

+class Chk(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _btnGetChk]getChk(): bool
	end func
	
	+func[d0001.knd, _wndGetText]getText(): []char
	end func
	
	+func[d0001.knd, _btnSetChk]setChk(value: bool)
	end func
	
	+func[d0001.knd, _wndSetText]setText(text: []char)
	end func
	
	+var onPush: func<(@WndBase)>
end class

+class Combo(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _comboAdd]add(text: []char)
	end func
	
	+func[d0001.knd, _comboClear]clear()
	end func
	
	+func[d0001.knd, _comboDel]del(idx: int)
	end func
	
	+func[d0001.knd, _comboGetSel]getSel(): int
	end func
	
	+func[d0001.knd, _comboGetText]getText(idx: int): []char
	end func
	
	+func[d0001.knd, _comboIns]ins(idx: int, text: []char)
	end func
	
	+func[d0001.knd, _comboLen]len(): int
	end func
	
	+func[d0001.knd, _comboSetSel]setSel(idx: int)
	end func
	
	+func[d0001.knd, _comboSetText]setText(idx: int, text: []char)
	end func
end class

+class Draw(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _drawDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _drawHideCaret]hideCaret()
	end func
	
	+func[d0001.knd, _drawMouseCapture]mouseCapture(enabled: bool)
	end func
	
	+func[d0001.knd, _drawMoveCaret]moveCaret(x: int, y: int)
	end func
	
	+func[d0001.knd, _drawPaint]paint()
	end func
	
	+func[d0001.knd, _drawShowCaret]showCaret(height: int, fontHandle: int)
	end func
	
	var equalMagnification: int
	var drawBuf: int
	+var onPaint: func<(@WndBase, int, int)>
	+var onMouseDownL: func<(@WndBase, int, int)>
	+var onMouseDownR: func<(@WndBase, int, int)>
	+var onMouseDownM: func<(@WndBase, int, int)>
	+var onMouseDoubleClick: func<(@WndBase, int, int)>
	+var onMouseUpL: func<(@WndBase, int, int)>
	+var onMouseUpR: func<(@WndBase, int, int)>
	+var onMouseUpM: func<(@WndBase, int, int)>
	+var onMouseMove: func<(@WndBase, int, int)>
	+var onMouseEnter: func<(@WndBase, int, int)>
	+var onMouseLeave: func<(@WndBase)>
	+var onMouseWheelX: func<(@WndBase, int)>
	+var onMouseWheelY: func<(@WndBase, int)>
	+var onFocus: func<(@WndBase, bool)>
	+var onKeyDown: func<(@WndBase, @Key, @ShiftCtrl)>
	+var onKeyUp: func<(@WndBase, @Key, @ShiftCtrl)>
	+var onKeyChar: func<(@WndBase, char)>
	+var onScrollX: func<(@WndBase, int)>
	+var onScrollY: func<(@WndBase, int)>
	+var onSetMouseImg: func<(@WndBase): @MouseImg>
end class

+class Edit(@EditBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _editRightAligned]rightAligned(enabled: bool)
	end func
end class

+class EditBase(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _wndGetText]getText(): []char
	end func
	
	+func[d0001.knd, _editReadonly]readonly(enabled: bool)
	end func
	
	+func[d0001.knd, _editSetSel]setSel(start: int, len: int)
	end func
	
	+func[d0001.knd, _wndSetText]setText(text: []char)
	end func
	
	+var onChange: func<(@WndBase)>
	+var onFocus: func<(@WndBase, bool)>
end class

+class EditMulti(@EditBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _editMultiAddText]addText(text: []char)
	end func
end class

+class Group(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _wndSetText]setText(text: []char)
	end func
	
	+func[d0001.knd, _wndGetText]getText(): []char
	end func
end class

+enum Key
	mouseL :: 0x01
	mouseR
	mouseM :: 0x04
	bs :: 0x08
	tab
	enter :: 0x0D
	shift :: 0x10
	ctrl
	alt
	pause
	esc :: 0x1B
	space :: 0x20
	pageUp
	pageDown
	end_
	home
	left
	up
	right
	down
	ins :: 0x2D
	del
	_0 :: 0x30
	_1
	_2
	_3
	_4
	_5
	_6
	_7
	_8
	_9
	a :: 0x41
	b
	c
	d
	e
	f
	g
	h
	i
	j
	k
	l
	m
	n
	o
	p
	q
	r
	s
	t
	u
	v
	w
	x
	y
	z
	f1 :: 0x70
	f2
	f3
	f4
	f5
	f6
	f7
	f8
	f9
	f10
	f11
	f12
	plus :: 0xBB
	comma
	minus
	period
end enum

+class Label(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _wndGetText]getText(): []char
	end func
	
	+func[d0001.knd, _wndSetText]setText(text: []char)
	end func
end class

+class List(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _listAdd]add(text: []char)
	end func
	
	+func[d0001.knd, _listClear]clear()
	end func
	
	+func[d0001.knd, _listDel]del(idx: int)
	end func
	
	+func[d0001.knd, _listGetSel]getSel(): int
	end func
	
	+func[d0001.knd, _listGetText]getText(idx: int): []char
	end func
	
	+func[d0001.knd, _listIns]ins(idx: int, text: []char)
	end func
	
	+func[d0001.knd, _listLen]len(): int
	end func
	
	+func[d0001.knd, _listSetSel]setSel(idx: int)
	end func
	
	+func[d0001.knd, _listSetText]setText(idx: int, text: []char)
	end func
	
	+var onSel: func<(@WndBase)>
	+var onMouseDoubleClick: func<(@WndBase)>
end class

+class ListView(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _listViewAdd]add(text: []char, img: int)
	end func
	
	+func[d0001.knd, _listViewAddColumn]addColumn(text: []char)
	end func
	
	+func[d0001.knd, _listViewAdjustWidth]adjustWidth()
	end func
	
	+func[d0001.knd, _listViewClear]clear()
	end func
	
	+func[d0001.knd, _listViewClearAll]clearAll()
	end func
	
	+func[d0001.knd, _listViewDel]del(idx: int)
	end func
	
	+func[d0001.knd, _listViewDelColumn]delColumn(column: int)
	end func
	
	+func[d0001.knd, _listViewDraggable]draggable(enabled: bool)
	end func
	
	+func[d0001.knd, _listViewGetChk]getChk(idx: int): bool
	end func
	
	+func[d0001.knd, _listViewGetSel]getSel(): int
	end func
	
	+func[d0001.knd, _listViewGetSelMulti]getSelMulti(idx: int): bool
	end func
	
	+func[d0001.knd, _listViewGetText]getText(img: &int, idx: int, column: int): []char
	end func
	
	+func[d0001.knd, _listViewIns]ins(idx: int, text: []char, img: int)
	end func
	
	+func[d0001.knd, _listViewInsColumn]insColumn(column: int, text: []char)
	end func
	
	+func[d0001.knd, _listViewLen]len(): int
	end func
	
	+func[d0001.knd, _listViewLenColumn]lenColumn(): int
	end func
	
	+func[d0001.knd, _listViewSetChk]setChk(idx: int, value: bool)
	end func
	
	+func[d0001.knd, _listViewSetSel]setSel(idx: int)
	end func
	
	+func[d0001.knd, _listViewSetSelMulti]setSelMulti(idx: int, value: bool)
	end func
	
	+func[d0001.knd, _listViewSetText]setText(idx: int, column: int, text: []char, img: int)
	end func
	
	+func[d0001.knd, _listViewStyle]style(listViewStyle: @ListViewStyle)
	end func
	
	+var onSel: func<(@WndBase)>
	+var onMouseDoubleClick: func<(@WndBase)>
	+var onMouseClick: func<(@WndBase)>
	+var onMoveNode: func<(@WndBase)>
	var draggable_: int
	var draggingImage: int
end class

+enum ListViewStyle
	large
	report
	small
	list_
	chk
	hideHeader :: 0x4000
end enum

+class Menu(@MenuBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _menuDtor, __frc]_dtor()
	end func
end class

+class MenuBase()
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _menuDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _menuAdd]add(id: int, text: []char)
	end func
	
	+func[d0001.knd, _menuAddLine]addLine()
	end func
	
	+func[d0001.knd, _menuAddPopup]addPopup(text: []char, popup: @Popup)
		do me.children.add(popup)
	end func
	
	+func[d0001.knd, _menuIns]ins(targetId: int, id: int, text: []char)
	end func
	
	+func[d0001.knd, _menuInsPopup]insPopup(target: @Popup, text: []char, popup: @Popup)
		do me.children.add(popup)
	end func
	
	+func[d0001.knd, _menuDel]del(id: int)
	end func
	
	+func[d0001.knd, _menuDelPopup]delPopup(popup: @Popup)
		do me.children.head()
		while loop(!me.children.term())
			if(me.children.get() =& popup)
				do me.children.del()
				break loop
			end if
			do me.children.next()
		end while
	end func
	
	var handle: int
	var children: list<@Popup>
end class

+enum MouseImg
	arrow :: 32512
	ibeam
	wait
	cross
	upArrow
	resizeLTRB :: 32642
	resizeRTLB
	resizeH
	resizeV
	move
	no :: 32648
	link
	arrowWait
	arrowHelp
end enum

+enum MsgBoxBtn
	ok
	okCancel
	abortRetryIgnore
	yesNoCancel
	yesNo
	retryCancel
	cancelAgainContinue
end enum

+enum MsgBoxIcon
	none
	err :: 0x10
	question :: 0x20
	warn :: 0x30
	info :: 0x40
end enum

+enum MsgBoxResult
	ok :: 1
	cancel
	abort
	retry
	ignore
	yes
	no
	again :: 10
	continue
end enum

+class Popup(@MenuBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _menuDtor, __frc]_dtor()
	end func
end class

+class Radio(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _btnGetChk]getChk(): bool
	end func
	
	+func[d0001.knd, _wndGetText]getText(): []char
	end func
	
	+func[d0001.knd, _btnSetChk]setChk(value: bool)
	end func
	
	+func[d0001.knd, _wndSetText]setText(text: []char)
	end func
	
	+var onPush: func<(@WndBase)>
end class

+class ScrollBase(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _scrollSetScrollPos]setScrollPos(pos: int)
	end func
	
	+func[d0001.knd, _scrollSetState]setState(min: int, max: int, page: int, pos: int)
	end func
end class

+class ScrollX(@ScrollBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
end class

+class ScrollY(@ScrollBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
end class

+enum ShiftCtrl
	none
	shift :: 0x01
	ctrl :: 0x02
end enum

+enum SysDir
	desktop :: 0x00
	fonts :: 0x14
	appData :: 0x1A
	windows :: 0x24
	system32 :: 0x25
	programFiles :: 0x26
end enum

+class Tab(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _tabAdd]add(text: []char)
	end func
	
	+func[d0001.knd, _tabGetPosInner]getPosInner(x: &int, y: &int, width: &int, height: &int)
	end func
	
	+func[d0001.knd, _tabGetSel]getSel(): int
	end func
	
	+func[d0001.knd, _tabLen]len(): int
	end func
	
	+func[d0001.knd, _tabSetSel]setSel(idx: int)
	end func
	
	+var onSel: func<(@WndBase)>
end class

+class TabOrder()
	*func[__ndc]ctor()
	end func
	
	+func[d0001.knd, _tabOrderChk]chk(key: @Key, shiftCtrl: @ShiftCtrl): bool
	end func
	
	var ctrls: []@WndBase
end class

+class Tree(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _treeAllowDraggingToRoot]allowDraggingToRoot(enabled: bool)
	end func
	
	+func[d0001.knd, _treeClear]clear()
	end func
	
	+func[d0001.knd, _treeDraggable]draggable(enabled: bool)
	end func
	
	+func[d0001.knd, _treeExpand]expand(expand_: bool)
	end func
	
	+func[d0001.knd, _treeGetSel, __mki]getSel(me2: @TreeNode): @TreeNode
	end func
	
	+func[d0001.knd, _treeRoot, __mki]root(me2: @TreeNode): @TreeNode
	end func
	
	+func[d0001.knd, _treeSetSel]setSel(node: @TreeNode)
	end func
	
	var draggable_: int
	var draggingItem: int
	+var onSel: func<(@WndBase)>
	+var onMoveNode: func<(@WndBase)>
end class

+class TreeNode()
	*func[__ndc]ctor()
	end func
	
	+*func cmp(t: kuin@Class): int
		ret me._item - (t $ @TreeNode)._item
	end func
	
	+func[d0001.knd, _treeNodeAddChild, __mki]addChild(me2: @TreeNode, name: []char): @TreeNode
	end func
	
	+func[d0001.knd, _treeNodeDelChild]delChild(node: @TreeNode)
	end func
	
	+func[d0001.knd, _treeNodeFirstChild, __mki]firstChild(me2: @TreeNode): @TreeNode
	end func
	
	+func[d0001.knd, _treeNodeGetName]getName(): []char
	end func
	
	+func[d0001.knd, _treeNodeInsChild, __mki]insChild(me2: @TreeNode, node: @TreeNode, name: []char): @TreeNode
	end func
	
	+func[d0001.knd, _treeNodeNext, __mki]next(me2: @TreeNode): @TreeNode
	end func
	
	+func[d0001.knd, _treeNodeParent, __mki]parent(me2: @TreeNode): @TreeNode
	end func
	
	+func[d0001.knd, _treeNodePrev, __mki]prev(me2: @TreeNode): @TreeNode
	end func
	
	var wndHandle: int
	+var _item: int
end class

+class Wnd(@WndBase)
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func[d0001.knd, _wndAcceptDraggedFiles]acceptDraggedFiles(isAccepted: bool)
	end func
	
	+func[d0001.knd, _wndActivate]activate()
	end func
	
	+func[d0001.knd, _wndActivated]activated(): bool
	end func
	
	+func[d0001.knd, _wndClose]close()
	end func
	
	+func[d0001.knd, _wndExit]exit()
	end func
	
	+func[d0001.knd, _wndFocusedWnd]focusedWnd(): bool
	end func
	
	+func[d0001.knd, _wndGetAlpha]getAlpha(): int
	end func
	
	+func[d0001.knd, _wndGetText]getText(): []char
	end func
	
	+func[d0001.knd, _wndMinMax]minMax(minWidth: int, minHeight: int, maxWidth: int, maxHeight: int)
	end func
	
	+func modal()
		do setModalLock(me)
		while(@act() & me.modalLock)
		end while
		
		func[d0001.knd, _wndSetModalLock]setModalLock(me_: @WndBase)
		end func
	end func
	
	+func[d0001.knd, _wndSetAlpha]setAlpha(alpha: int)
	end func
	
	+func[d0001.knd, _wndSetMenu]setMenu(menu: @Menu)
		if(menu <>& null)
			do me.addChild(menu)
		end if
	end func
	
	+func[d0001.knd, _wndSetText]setText(text: []char)
	end func
	
	+func[d0001.knd, _wndUpdateMenu]updateMenu()
	end func
	
	var minMaxRect: int
	+var onClose: func<(@WndBase): bool>
	+var onActivate: func<(@WndBase, bool, bool)>
	+var onPushMenu: func<(@WndBase, int)>
	+var onDropFiles: func<(@WndBase, [][]char)>
	+var onResize: func<(@WndBase)>
	var modalLock: bool
end class

+class WndBase()
	*func[__ndc]ctor()
	end func
	
	*func[d0001.knd, _wndBaseDtor, __frc]_dtor()
	end func
	
	+func addChild(child: kuin@Class)
		do me.children.add(child)
	end func
	
	+func[d0001.knd, _wndBaseClientToScreen]clientToScreen(screenX: &int, screenY: &int, clientX: int, clientY: int)
	end func
	
	+func findChild(name: []char): @WndBase
		if(dbg)
			if(name =& null)
				throw 0xE9170006
			end if
		end if
		ret findRecursion(me, name)
		
		func findRecursion(wnd: @WndBase, name: []char): @WndBase
			if(wnd.name <>& null & wnd.name = name)
				ret wnd
			end if
			do wnd.children.head()
			while(!wnd.children.term())
				var child: kuin@Class :: wnd.children.get()
				if(child =$ @WndBase)
					var result: @WndBase :: findRecursion(child $ @WndBase, name)
					if(result <>& null)
						ret result
					end if
				end if
				do wnd.children.next()
			end while
			ret null
		end func
	end func
	
	+func[d0001.knd, _wndBaseFocus]focus()
	end func
	
	+func[d0001.knd, _wndBaseFocused]focused(): bool
	end func
	
	+func[d0001.knd, _wndBaseGetEnabled]getEnabled(): bool
	end func
	
	+func[d0001.knd, _wndBaseGetPos]getPos(x: &int, y: &int, width: &int, height: &int)
	end func
	
	+func[d0001.knd, _wndBaseGetPosScreen]getPosScreen(x: &int, y: &int, width: &int, height: &int)
	end func
	
	+func[d0001.knd, _wndBaseGetVisible]getVisible(): bool
	end func
	
	+func[d0001.knd, _wndBaseScreenToClient]screenToClient(clientX: &int, clientY: &int, screenX: int, screenY: int)
	end func
	
	+func[d0001.knd, _wndBaseSetEnabled]setEnabled(isEnabled: bool)
	end func
	
	+func[d0001.knd, _wndBaseSetPos]setPos(x: int, y: int, width: int, height: int)
	end func
	
	+func[d0001.knd, _wndBaseSetRedraw]setRedraw(isEnabled: bool)
	end func
	
	+func[d0001.knd, _wndBaseSetVisible]setVisible(isVisible: bool)
	end func
	
	+var name: []char
	var kind: int
	var handle: int
	var defaultWndProc: int
	var ctrlFlag: int
	var defaultRect: int
	var redrawEnabled: int
	+var children: list<kuin@Class>
end class

+enum WndStyle
	normal
	fix
	aspect
	popup
	dialog
	layered :: 0x10000
	noMinimize :: 0x20000
end enum

+func[d0001.knd, _act]act(): bool
	if(@actions <>& null)
		do @actions.head()
		while(!@actions.term())
			do @actions.get()()
			do @actions.next()
		end while
	end if
end func

+func addAction(action: func<()>)
	if(@actions =& null)
		do @actions :: #list<func<()>>
	end if
	do @actions.add(action)
end func

+func[d0001.knd, _colorDialog]colorDialog(parent: @Wnd, defaultColor: int): int
end func

#exe
+func[d0001.knd, _exeDir]exeDir(): []char
#cpp,web
+func exeDir(): []char
#cpp
	excode "#if defined(_WIN32)\n"
	excode "wchar_t b_[512];\n"
	excode "wchar_t*p_;\n"
	excode "GetModuleFileName(nullptr,b_,512);\n"
	excode "p_=wcsrchr(b_,L'\\\\');\n"
	excode "if(p_==nullptr)return nullptr;\n"
	excode "*(p_+1)=L'\\0';\n"
	excode "p_=b_;\n"
	excode "while(*p_!=L'\\0'){\n"
	excode "if(*p_==L'\\\\')*p_=L'/';\n"
	excode "p_++;\n"
	excode "}\n"
	excode "size_t l_=wcslen(b_);\n"
	excode "type_(Array_<char16_t>)a_=new_(Array_<char16_t>)();\n"
	excode "a_->L=l_;\n"
	excode "a_->B=newPrimArray_(static_cast<std::size_t>(l_+1),char16_t);\n"
	excode "memcpy(a_->B,b_,sizeof(char16_t)*static_cast<std::size_t>(l_+1));\n"
	excode "return a_;\n"
	excode "#else\n"
	excode "return nullptr;\n"
	excode "#endif\n"
#web
	excode "return null;\n"
#any
end func

#exe
+func[d0001.knd, _fileDialogDir]fileDialogDir(defaultDir: []char)
end func

+func[d0001.knd, _getCaretPos]getCaretPos(x: &int, y: &int)
end func

+func[d0001.knd, _getClipboardStr]getClipboardStr(): []char
end func

+func[d0001.knd, _getOnKeyPress]getOnKeyPress(): func<(@Key, @ShiftCtrl): bool>
end func

+func[d0001.knd, _key]key(key_: @Key): bool
end func

+func[d0001.knd, _makeBtn, __mki]makeBtn(me2: @Btn, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, text: []char): @Btn
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeChk, __mki]makeChk(me2: @Chk, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, text: []char): @Chk
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeCombo, __mki]makeCombo(me2: @Combo, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Combo
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeDraw, __mki]makeDraw(me2: @Draw, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, equalMagnification: bool): @Draw
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeDrawEditable, __mki]makeDrawEditable(me2: @Draw, parent: @WndBase, x: int, y: int, width: int, height: int): @Draw
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeDrawReduced, __mki]makeDrawReduced(me2: @Draw, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, equalMagnification: bool, split: int): @Draw
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeEdit, __mki]makeEdit(me2: @Edit, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Edit
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeEditMulti, __mki]makeEditMulti(me2: @EditMulti, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @EditMulti
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeGroup, __mki]makeGroup(me2: @Group, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, text: []char): @Group
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeLabel, __mki]makeLabel(me2: @Label, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, text: []char): @Label
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeList, __mki]makeList(me2: @List, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @List
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func makeListView(parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, multiSel: bool, smallImgs: [][]char, largeImgs: [][]char): @ListView
	var s: [][]bit8
	var l: [][]bit8
	if(smallImgs <>& null)
		do s :: #[^smallImgs][]bit8
		for i(0, ^s - 1)
			var f: file@Reader :: file@makeReader(smallImgs[i])
			if(f =& null)
				throw 0xE9170007
			end if
			do s[i] :: f.read(f.fileSize())
			do f.fin()
		end for
	end if
	if(largeImgs <>& null)
		do l :: #[^largeImgs][]bit8
		for i(0, ^l - 1)
			var f: file@Reader :: file@makeReader(largeImgs[i])
			if(f =& null)
				throw 0xE9170007
			end if
			do l[i] :: f.read(f.fileSize())
			do f.fin()
		end for
	end if
	ret makeListViewImpl(parent, x, y, width, height, anchorX, anchorY, multiSel, s, l)
	
	func[d0001.knd, _makeListView, __mki]makeListViewImpl(me2: @ListView, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, multiSel: bool, smallImgs: [][]bit8, largeImgs: [][]bit8): @ListView
		if(parent <>& null)
			do parent.addChild(me2)
		end if
	end func
end func

+func[d0001.knd, _makeMenu, __mki]makeMenu(me2: @Menu): @Menu
end func

+func[d0001.knd, _makePopup, __mki]makePopup(me2: @Popup): @Popup
end func

+func[d0001.knd, _makeRadio, __mki]makeRadio(me2: @Radio, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor, text: []char): @Radio
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeScrollX, __mki]makeScrollX(me2: @ScrollX, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @ScrollX
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeScrollY, __mki]makeScrollY(me2: @ScrollY, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @ScrollY
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeTab, __mki]makeTab(me2: @Tab, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Tab
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeTabOrder, __mki]makeTabOrder(me2: @TabOrder, ctrls: []@WndBase): @TabOrder
end func

+func[d0001.knd, _makeTree, __mki]makeTree(me2: @Tree, parent: @WndBase, x: int, y: int, width: int, height: int, anchorX: @Anchor, anchorY: @Anchor): @Tree
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _makeWnd, __mki]makeWnd(me2: @Wnd, parent: @Wnd, style: @WndStyle, width: int, height: int, text: []char): @Wnd
	if(parent <>& null)
		do parent.addChild(me2)
	end if
end func

+func[d0001.knd, _msgBox]msgBox(parent: @Wnd, text: []char, title: []char, icon: @MsgBoxIcon, btn: @MsgBoxBtn): @MsgBoxResult
end func

+func[d0001.knd, _openFileDialog]openFileDialog(parent: @Wnd, filter: [][]char, defaultFilter: int): []char
end func

+func[d0001.knd, _saveFileDialog]saveFileDialog(parent: @Wnd, filter: [][]char, defaultFilter: int, defaultExt: []char): []char
end func

+func[d0001.knd, _screenSize]screenSize(width: &int, height: &int)
end func

+func[d0001.knd, _setClipboardStr]setClipboardStr(str: []char)
end func

+func[d0001.knd, _setOnKeyPress]setOnKeyPress(onKeyPressFunc: func<(@Key, @ShiftCtrl): bool>)
end func

+func[d0001.knd, _sysDir]sysDir(kind: @SysDir): []char
end func

