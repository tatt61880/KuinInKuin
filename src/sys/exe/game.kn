func[d1004.knd, _init]_init()
end func

+class ChipInfo()
	+var shape: @Shape
	+var backFriction: float
	+var solidFriction: float
	+var fluidFriction: float
	+var repulsion: float
	+var flowX: float
	+var flowY: float
end class

+enum Direction
	none :: 0
	left :: 1
	top :: 2
	right :: 4
	bottom :: 8
end enum

+class Map()
	*func[__ndc]ctor()
	end func
	
	*func[d1004.knd, _mapDtor, __frc]_dtor()
	end func
	
	+func[d1004.knd, _mapFind]find(x: &int, y: &int, value: int): bool
	end func
	
	+func[d1004.knd, _mapGet]get(x: int, y: int): int
	end func
	
	+func[d1004.knd, _mapSet]set(x: int, y: int, value: int)
	end func
	
	var mapWidth: int
	var mapHeight: int
	var buf: int
	var chipWidth: float
	var chipHeight: float
end class

+class Rect()
	+func hitBottom(): bool
		ret me.flags.and(0x08b64) <> 0b64
	end func
	
	+func hitLeft(): bool
		ret me.flags.and(0x01b64) <> 0b64
	end func
	
	+func hitRight(): bool
		ret me.flags.and(0x04b64) <> 0b64
	end func
	
	+func hitTop(): bool
		ret me.flags.and(0x02b64) <> 0b64
	end func
	
	+func[d1004.knd, _rectBackFriction]backFriction(backFriction_: float)
	end func
	
	+func[d1004.knd, _rectFluidFriction]fluidFriction(fluidFriction_: float)
	end func
	
	+func[d1004.knd, _rectMove]move(maxVelo: float)
	end func
	
	+func[d1004.knd, _rectUpdate]update()
	end func
	
	+var x: float
	+var y: float
	+var width: float
	+var height: float
	+var veloX: float
	+var veloY: float
	var flags: bit64
	var buf0: float
	var buf1: float
	var buf2: float
	var buf3: float
	var buf4: float
	var buf5: float
	var buf6: float
	var buf7: float
	var buf8: float
end class

+class Roll()
	*func[__ndc]ctor()
	end func
	
	*func[d1004.knd, _rollDtor, __frc]_dtor()
	end func
	
	+func[d1004.knd, _rollProceed]proceed(speed: float): bool
	end func
	
	+func[d1004.knd, _rollReset]reset()
	end func
	
	var rollCallback: func<(float, [][]char)>
	var pos_: float
	var buf: int
	var idx: int
end class

+enum Shape
	none
	rect
	triLeftTop
	triRightTop
	triLeftBottom
	triRightBottom
	oneWayLeft
	oneWayTop
	oneWayRight
	oneWayBottom
end enum

+func hitMapRect(map: @Map, rect: @Rect, chipInfoCallback: func<(int, @ChipInfo)>, hitCallback: func<(int, int, @Direction)>)
	do hitMapRectImpl(map, rect, chipInfoCallback, hitCallback)
	
	func[d1004.knd, _hitMapRectImpl, __mki]hitMapRectImpl(me2: @ChipInfo, map: @Map, rect: @Rect, chipInfoCallback: func<(int, @ChipInfo)>, hitCallback: func<(int, int, @Direction)>): @ChipInfo
	end func
end func

+func[d1004.knd, _hitRectRect]hitRectRect(rect1: @Rect, rect2: @Rect, weight1: float, weight2: float, repulsion: float, solidFriction: float): @Direction
end func

+func makeMap(path: []char, chipWidth: float, chipHeight: float): @Map
	var handle: file@Reader :: file@makeReader(path)
	if(handle =& null)
		throw 0xE9170007
	end if
	do handle.delimiter("\n,")
	var mapWidth: int :: handle.readInt()
	var mapHeight: int :: handle.readInt()
	var buf: []int :: #[mapWidth * mapHeight]int
	for i(0, mapWidth * mapHeight - 1)
		do buf[i] :: handle.readInt()
	end for
	ret makeMapImpl(mapWidth, mapHeight, buf, chipWidth, chipHeight)
	
	func[d1004.knd, _makeMapImpl, __mki]makeMapImpl(me2: @Map, mapWidth: int, mapHeight: int, data: []int, chipWidth: float, chipHeight: float): @Map
	end func
end func

+func[d1004.knd, _makeMapEmpty, __mki]makeMapEmpty(me2: @Map, mapWidth: int, mapHeight: int, chipWidth: float, chipHeight: float): @Map
end func

+func makeRoll(path: []char, rollCallback: func<(float, [][]char)>): @Roll
	var handle: file@Reader :: file@makeReader(path)
	if(handle =& null)
		throw 0xE9170007
	end if
	do handle.delimiter("\n,")
	var itemNum: int :: handle.readInt()
	var timings: []float :: #[itemNum]float
	var params: [][][]char :: #[itemNum][][]char
	for i(0, itemNum - 1)
		do timings[i] :: handle.readFloat()
		var paramsNum: int :: handle.readInt()
		do params[i] :: #[paramsNum][]char
		for j(0, paramsNum - 1)
			do params[i][j] :: handle.readStr()
		end for
	end for
	ret makeRollImpl(timings, params, rollCallback)
	
	func[d1004.knd, _makeRollImpl, __mki]makeRollImpl(me2: @Roll, timings: []float, params: [][][]char, rollCallback: func<(float, [][]char)>): @Roll
	end func
end func
