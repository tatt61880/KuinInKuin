+var docs: dict<[]char, \doc@Doc>
+var curDoc: \doc@Doc
+var curDocName: []char
+var mainSrcPath: []char
+var mainSrcDir: []char
+var sysDir: []char
var runningFiles: list<[]char>
var errList: dict<@Pos, []char>
+var breakPos: @Pos

+class Pos()
	+var src: []char
	+var row: int
	+var col: int
	
	+*func cmp(t: kuin@Class): int
		var t2: @Pos :: t $ @Pos
		var result: int :: lib@cmp(me.src, t2.src)
		if(result <> 0)
			ret result
		end if
		do result :: me.row - t2.row
		if(result <> 0)
			ret result
		end if
		ret me.col - t2.col
	end func
end class

+func init()
	do @sysDir :: wnd@exeDir() ~ "sys/"
	do @runningFiles :: #list<[]char>
	do @breakPos :: null
end func

+func fin()
	do \dll@waitEndOfInterpret2()
	do @clearDocs()
end func

func updateMainSrcDir(dir: []char)
	do @mainSrcDir :: dir
	do \doc_ar_2d@updateMainSrcDir(dir)
end func

+func newMainSrc()
	do \dll@waitEndOfInterpret2()
	var doc: \doc_src@DocSrc :: #\doc_src@DocSrc
	do @curDoc :: doc
	do @mainSrcPath :: \common@defaultDir ~ "main.kn"
	do @updateMainSrcDir(\common@defaultDir)
	do @curDocName :: "\\main"
	do @clearDocs()
	do @docs :: #dict<[]char, \doc@Doc>
	do @docs.add("\\main", @curDoc)
	do @initMainSrc()
	do @curDoc.fix(true)
	do \form@updateUi()
end func

+func openMainSrc(path: []char)
	var doc: \doc_src@DocSrc :: #\doc_src@DocSrc
	if(!doc.load(path, false))
		var msg: []char
		if(\common@langEn)
			do msg :: "Loading failed. " ~ path
		else
			do msg :: "読み込みに失敗しました。 " ~ path
		end if
		do wnd@msgBox(\form@wndMain, msg, \common@title, %err, %ok)
		ret
	end if
	do \dll@waitEndOfInterpret2()
	do @curDoc :: doc
	do @mainSrcPath :: path
	do @updateMainSrcDir(file@dir(path))
	do @curDocName :: "\\" ~ file@delExt(file@fileName(path))
	do @clearDocs()
	do @docs :: #dict<[]char, \doc@Doc>
	do @docs.add("\\" ~ file@delExt(file@fileName(path)), @curDoc)
	do \form@iconPath :: ""
	do \prop@load()
	do @initMainSrc()
	do @curDoc.fix(true)
	do \form@updateUi()
end func

func initMainSrc()
	do \completion@close()
	do @resetErrList()
	do \form@updateUi()
	do \form@paintDrawEditor(false)
	do \form@focusDrawEditor()
end func

+func save(saveAs: bool): bool
	if(@mainSrcDir = \common@defaultDir | saveAs)
		if(!saveMainSrc())
			ret false
		end if
	end if
	do \prop@save()
	var saveAllSuccess: lib@Bool :: #lib@Bool
	do saveAllSuccess.value :: true
	do @docs.forEach(saveAllCallback, saveAllSuccess)
	do \form@updateFile()
	ret saveAllSuccess.value
	
	func saveAllCallback(src: []char, doc: \doc@Doc, data: kuin@Class): bool
		var saveAllSuccess: lib@Bool :: data $ lib@Bool
		if(doc.getChanged() & src[0] = '\\')
			var path: []char :: @mainSrcDir ~ src.sub(1, -1).replace("\\", "/") ~ @getExt(doc)
			if(!file@exist(file@dir(path)))
				do file@makeDir(file@dir(path))
			end if
			if(doc.save(path))
				do doc.setChanged(false)
			else
				var msg: []char
				if(\common@langEn)
					do msg :: "Saving failed. " ~ path
				else
					do msg :: "保存に失敗しました。 " ~ path
				end if
				do wnd@msgBox(\form@wndMain, msg, \common@title, %err, %ok)
				do saveAllSuccess.value :: false
			end if
		end if
		ret true
	end func
	
	func saveMainSrc(): bool
		var file: []char :: wnd@saveFileDialog(\form@wndMain, [\common@langEn ?("Kuin source code (*.kn)", "Kuinソースコード (*.kn)"), "*.kn"], 0, "kn")
		if(file =& null)
			ret false
		end if
		var fileName: []char :: "\\" ~ file@delExt(file@fileName(file))
		if(fileName <> "\\" ~ file@delExt(file@fileName(@mainSrcPath)) & @docs.exist(fileName))
			do wnd@msgBox(\form@wndMain, \common@langEn ?("The file name is already existed.", "そのファイル名は既に存在します。"), \common@title, %err, %ok)
			ret false
		end if
		var newDocs: dict<[]char, \doc@Doc> :: #dict<[]char, \doc@Doc>
		
		class DocsClass()
			+var docs: dict<[]char, \doc@Doc>
			+var oldMainSrcName: []char
			+var newMainSrcName: []char
		end class
		
		var data: DocsClass :: #DocsClass
		do data.docs :: newDocs
		do data.oldMainSrcName :: "\\" ~ file@delExt(file@fileName(@mainSrcPath))
		do data.newMainSrcName :: fileName
		do @mainSrcPath :: file
		do @updateMainSrcDir(file@dir(file))
		do @curDocName :: fileName
		do @docs.forEach(callback, data)
		do @docs :: newDocs
		do \recent@save(file)
		ret true
		
		func callback(src: []char, doc: \doc@Doc, data: kuin@Class): bool
			var data2: DocsClass :: data $ DocsClass
			if(src[0] <> '\\')
				ret true
			end if
			if(src = data2.oldMainSrcName)
				do src :: data2.newMainSrcName
			end if
			do doc.setChanged(true)
			do data2.docs.add(src, doc)
			ret true
		end func
	end func
end func

+func setCurSrc(doc: \doc@Doc)
	if(@curDoc =& doc)
		ret
	end if
	do \completion@close()
	do @curDoc :: doc
	do @curDocName :: @getDocName(doc)
	do @curDoc.fix(false)
	do \form@paintDrawEditor(false)
	do \form@focusDrawEditor()
	do \form@updateUi()
end func

+func mainDoc(): \doc@Doc
	class RefDoc()
		+var value: \doc@Doc
		+var mainSrcName: []char
	end class
	var doc: RefDoc :: #RefDoc
	do doc.mainSrcName :: "\\" ~ file@delExt(file@fileName(@mainSrcPath))
	do @docs.forEach(callback, doc)
	ret doc.value
	
	func callback(src: []char, doc: \doc@Doc, data: kuin@Class): bool
		var data2: RefDoc :: data $ RefDoc
		if(src = data2.mainSrcName)
			do data2.value :: doc
			ret false
		end if
		ret true
	end func
end func

+func chkChanged(): bool
	var chkCloseChanged: lib@Bool :: #lib@Bool
	do chkCloseChanged.value :: false
	do @docs.forEach(callback, chkCloseChanged)
	if(!chkCloseChanged.value)
		ret true
	end if
	var msg: []char
	if(\common@langEn)
		do msg :: "Do you want to save changes to the documents?"
	else
		do msg :: "ドキュメントへの変更を保存しますか？"
	end if
	var result: wnd@MsgBoxResult :: wnd@msgBox(\form@wndMain, msg, \common@title, %warn, %yesNoCancel)
	if(result = %cancel)
		ret false
	elif(result = %no)
		ret true
	end if
	ret @save(false)
	
	func callback(src: []char, doc: \doc@Doc, data: kuin@Class): bool
		var chkCloseChanged: lib@Bool :: data $ lib@Bool
		if(src[0] = '\\' & doc.getChanged())
			do chkCloseChanged.value :: true
			ret false
		end if
		ret true
	end func
end func

+func getSrc(path: []char): [][]char
	; This function is called by the Kuin compiler.
	var path2: []char
	if(^@mainSrcDir <= ^path & @mainSrcDir = path.sub(0, ^@mainSrcDir))
		do path2 :: "\\" ~ file@delExt(path.sub(^@mainSrcDir, -1)).replace("/", "\\")
	elif(^@sysDir <= ^path & @sysDir = path.sub(0, ^@sysDir))
		do path2 :: file@delExt(path.sub(^@sysDir, -1)).replace("/", "\\")
	else
		do path2 :: ##path
	end if
	var doc: \doc@Doc :: @docs.get(path2, &)
	if(doc <>& null)
		ret doc.getSrc()
	end if
	
	do doc :: @loadFileToDocs(##path)
	if(doc <>& null)
		ret doc.getSrc()
	end if
	ret null
end func

+func loadFileToDocs(path: []char): \doc@Doc
	do path :: file@fullPath(path)
	var doc: \doc@Doc
	switch(file@ext(path).lower())
	case "kn"
		do doc :: #\doc_src@DocSrc
	case "kngen"
		do doc :: #\doc_gen@DocGen
	default
		ret null
	end switch
	var name: []char
	if(^@sysDir <= ^path & @sysDir = path.sub(0, ^@sysDir))
		if(!doc.load(path, true))
			ret null
		end if
		do name :: file@delExt(path.sub(^@sysDir, -1)).replace("/", "\\")
	elif(@mainSrcDir = \common@defaultDir | !(^@mainSrcDir <= ^path & @mainSrcDir = path.sub(0, ^@mainSrcDir)))
		ret null
	else
		if(!doc.load(path, false))
			ret null
		end if
		do name :: "\\" ~ file@delExt(path.sub(^@mainSrcDir, -1)).replace("/", "\\")
	end if
	do @docs.add(name, doc)
	ret doc
end func

+func jumpSrc(pos: @Pos): bool
	if(pos =& null | pos.src =& null | ^pos.src = 0 | pos.src[0] <> '\\')
		ret false
	end if
	if(pos.src =& null)
		ret false
	end if
	var doc: \doc@Doc :: @docs.get(pos.src, &)
	if(doc =& null)
		ret false
	end if
	if(doc =$ \doc_src@DocSrc)
		if(doc <>& @curDoc)
			var sel: int :: -1
			for i(0, \form@listFile.len() - 1)
				var name: []char :: @removePrefix(\form@listFile.getText(i))
				if(name = pos.src)
					do sel :: i
					break i
				end if
			end for
			if(sel = -1)
				ret false
			end if
			do \form@listFile.setSel(sel)
			do \form@listFileOnSel(\form@listFile)
		end if
		do(@curDoc $ \doc_src@DocSrc).move(pos.col - 1, pos.row - 1)
		do \form@paintDrawEditor(false)
		do \form@focusDrawEditor()
		ret true
	end if
	ret false
end func

+func removePrefix(src: []char): []char
	var begin: int :: 0
	while loop(begin < ^src)
		switch(src[begin])
		case '*', '>'
			do begin :+ 1
		default
			break loop
		end switch
	end while
	if(begin = 0)
		ret src
	else
		ret src.sub(begin, -1)
	end if
end func

+func getDocName(doc: \doc@Doc): []char
	class GetDocNameClass()
		+var src: []char
		+var doc2: \doc@Doc
	end class
	
	var getSrcClass: GetDocNameClass :: #GetDocNameClass
	do getSrcClass.src :: null
	do getSrcClass.doc2 :: doc
	do @docs.forEach(callback, getSrcClass)
	ret getSrcClass.src
	
	func callback(src: []char, doc: \doc@Doc, data: kuin@Class): bool
		var param: GetDocNameClass :: data $ GetDocNameClass
		if(doc =& param.doc2)
			do param.src :: src
			ret false
		end if
		ret true
	end func
end func

+func delRunningFiles()
	do @runningFiles.head()
	while loop(!@runningFiles.term())
		var dir: []char :: wnd@sysDir(%appData) ~ "Kuin/" ~ @runningFiles.get() ~ "/"
		try
			if(file@delDir(dir))
				do @runningFiles.del()
				skip loop
			end if
		catch
		end try
		do @runningFiles.next()
	end while
end func

+func addRunningFileName(): []char
	var uuid: []char :: lib@rndUuid()
	do @runningFiles.add(uuid)
	ret uuid
end func

+func resetErrList()
	do @errList :: #dict<@Pos, []char>
	if(@curDoc =$ \doc_src@DocSrc)
		do(@curDoc $ \doc_src@DocSrc).resetListInfoItem()
	end if
end func

+func updateErrList()
	if(@curDoc =$ \doc_src@DocSrc)
		do @errList.forEach(callback, @curDoc $ \doc_src@DocSrc)
	end if
	do \form@paintDrawEditor(false)
	
	func callback(pos: @Pos, msg: []char, data: kuin@Class): bool
		var doc_src: \doc_src@DocSrc :: data $ \doc_src@DocSrc
		var listInfoItem: \doc_src@ErrListItem :: #\doc_src@ErrListItem
		do listInfoItem.text :: msg
		do listInfoItem.pos :: pos
		do doc_src.addListInfoItem(listInfoItem)
		
		; Fill in words with the error color.
		if(pos.src =& null)
			ret true
		end if
		var doc: \doc@Doc :: @docs.get(pos.src, &)
		if(doc <>& null & doc =$ \doc_src@DocSrc)
			var doc2: \doc_src@DocSrc :: doc $ \doc_src@DocSrc
			var x: int :: pos.col - 1
			var y: int :: pos.row - 1
			var color: bit8
			if(moveWordTop(doc2.src.src, doc2.src.color, &x, &y, &color))
				while(x < ^doc2.src.color[y] & doc2.src.color[y][x].and(0x7Fb8) = color)
					do doc2.src.color[y][x] :: doc2.src.color[y][x].or(0x80b8)
					do x :+ 1
				end while
			end if
		end if
		ret true
		
		func moveWordTop(src: [][]char, srcColor: [][]bit8, x: &int, y: &int, color: &bit8): bool
			if(y < 0)
				do y :: 0
			elif(^srcColor <= y)
				do y :: ^srcColor - 1
			end if
			if(1 <= x & x < ^srcColor[y] & (src[y][x] = ' ' | src[y][x] = '\t' | srcColor[y][x].and(0x7Fb8) = %comment $ \doc_src@CharColor $ bit8 | srcColor[y][x].and(0x7Fb8) = %symbol $ \doc_src@CharColor $ bit8))
				do x :- 1
			end if
			if(x < 0)
				do x :: 0
			elif(^srcColor[y] <= x)
				do x :: ^srcColor[y] - 1
			end if
			if(^srcColor[y] <> 0)
				do color :: srcColor[y][x].and(0x7Fb8)
				while(x >= 1 & srcColor[y][x - 1].and(0x7Fb8) = color)
					do x :- 1
				end while
				ret true
			end if
			ret false
		end func
	end func
end func

+func addErrList(pos: @Pos, code: []char, msg: []char, src: []char, row: int, col: int)
	if(^code >= 1 & code[0] = 'I')
		ret
	end if
	if(!@errList.exist(pos))
		do @errList.add(pos, errStr(code, msg, src, row, col))
	end if
	
	func errStr(code: []char, msg: []char, src: []char, row: int, col: int): []char
		ret "[" ~ \common@nullStr(src) ~ ": " ~ row.toStr() ~ ", " ~ col.toStr() ~ "] " ~ \common@nullStr(code) ~ ": " ~ \common@nullStr(msg)
	end func
end func

func clearDocs()
	if(@docs =& null)
		ret
	end if
	do @docs.forEach(callback, null)
	
	func callback(src: []char, doc: \doc@Doc, data: kuin@Class): bool
		do doc.fin()
		ret true
	end func
end func

+func getExt(doc: \doc@Doc): []char
	if(doc =$ \doc_src@DocSrc)
		ret ".kn"
	end if
	if(doc =$ \doc_gen@DocGen)
		ret ".kngen"
	end if
	ret ""
end func
