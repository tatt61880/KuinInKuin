+var wndMain: wnd@Wnd
+var listLt: wnd@ListView
+var treeLb: wnd@Tree
+var listLb: wnd@ListView
+var btnCode: wnd@Btn
var editFile: wnd@Edit
+var drawEditor: wnd@Draw
+var scrollXSrc: wnd@ScrollX
+var scrollYSrc: wnd@ScrollY
+var editHint: wnd@Edit
+var listRb: wnd@ListView
+var groupRbAr: wnd@Group

+var labelRbArName: wnd@Label
+var editRbArName: wnd@Edit
+var chkRbArVisible: wnd@Chk
+var labelRbArPos: wnd@Label
+var editRbArX: wnd@Edit
+var labelRbArMul1: wnd@Label
+var editRbArY: wnd@Edit
+var labelRbArSub: wnd@Label
+var editRbArWidth: wnd@Edit
+var labelRbArMul2: wnd@Label
+var editRbArHeight: wnd@Edit
+var btnRbArProp: wnd@Btn
var chkRbArSnap: wnd@Chk
var editRbArSnap: wnd@Edit
var labelRbArZoom: wnd@Label
var editRbArZoom: wnd@Edit
var btnRbArZoomOut: wnd@Btn
var btnRbArZoomIn: wnd@Btn
var tabOrderRbAr: wnd@TabOrder

var editLog: wnd@EditMulti
var btnCompile: wnd@Btn
var groupConfig: wnd@Group
var groupEnv: wnd@Group
var radioEnvWnd: wnd@Radio
var radioEnvCui: wnd@Radio
var btnProjSettings: wnd@Btn
var btnRls: wnd@Btn
+var listFile: wnd@List
var btnFileAdd: wnd@Btn
var btnFileDel: wnd@Btn
var menuMain: wnd@Menu
var popupMainEdit: wnd@Popup
var popupMainFile: wnd@Popup
var popupMainBuild: wnd@Popup
var popupMainDbg: wnd@Popup
var popupMainTools: wnd@Popup
var popupMainHelp: wnd@Popup
var popupMainArranger: wnd@Popup
+var popupRecentFiles: wnd@Popup

var lockingEditor: bool
var lockUi: bool
var drag: bool
+var snap: bool
+var snapValue: int
+var zoom: float
+var iconPath: []char
+var relatedFiles: list<[]char>
var redrawingRequired: bool
var interpret2Required: bool
var completionRequired: bool

enum SourceCodeKind
	cpp
	web
end enum

+func makeWnd()
	do @lockUi :: true
	
	do @wndMain :: wnd@makeWnd(null, %normal, 1224, 768, \common@title)
	do @wndMain.minMax(930, 640, -1, -1)
	do @wndMain.acceptDraggedFiles(true)
	do @wndMain.onClose :: @wndMainOnClose
	do @wndMain.onActivate :: @wndMainOnActivate
	do @wndMain.onPushMenu :: @wndMainOnPushMenu
	do @wndMain.onDropFiles :: @wndMainOnDropFiles
	do @wndMain.onResize :: @wndMainOnResize
	do @listLt :: wnd@makeListView(@wndMain, 12, 12, 244, 272, %fix, %fix, false, null, ["res/obj_none.png", "res/obj_btn.png", "res/obj_chk.png", "res/obj_edit.png", "res/obj_label.png", "res/obj_group.png", "res/obj_rect.png", "res/obj_circle.png", "res/obj_text.png", "res/obj_img.png", "res/obj_roundrect.png", "res/obj_particle.png", "res/obj_edit_multi.png"])
	do @listLt.setVisible(false)
	do @listLt.onMouseClick :: listLtOnMouseClick
	
	func listLtOnMouseClick(wnd: wnd@WndBase)
		do \src@curDoc.onEvent(%listLtOnMouseClick)
	end func
	
	do @listLt.style(%list_)
	do @treeLb :: wnd@makeTree(@wndMain, 12, 290, 244, 466, %fix, %scale)
	do @treeLb.setVisible(false)
	do @listLb :: wnd@makeListView(@wndMain, 12, 290, 244, 466, %fix, %scale, true, ["res/obj_btn.png", "res/obj_chk.png", "res/obj_edit.png", "res/obj_label.png", "res/obj_group.png", "res/obj_rect.png", "res/obj_circle.png", "res/obj_text.png", "res/obj_img.png", "res/obj_roundrect.png", "res/obj_particle.png", "res/obj_edit_multi.png"], null)
	do @listLb.setVisible(false)
	do @listLb.draggable(true)
	do @listLb.onMouseClick :: listLbOnMouseClick
	
	func listLbOnMouseClick(wnd: wnd@WndBase)
		do \src@curDoc.onEvent(%listLbOnMouseClick)
	end func
	
	do @listLb.onMoveNode :: listLbOnMoveNode
	
	func listLbOnMoveNode(wnd: wnd@WndBase)
		do \src@curDoc.onEvent(%listLbOnMoveNode)
	end func
	
	do @btnCode :: wnd@makeBtn(@wndMain, 262, 12, 100, 23, %fix, %fix, \common@langEn ?("Show Designer", "デザイナを表示"))
	do @btnCode.setEnabled(false)
	do @btnCode.onPush :: @btnCodeOnPush
	do @editFile :: wnd@makeEdit(@wndMain, 368, 20, 653, 15, %scale, %fix)
	do @editFile.readonly(true)
	do @drawEditor :: wnd@makeDraw(@wndMain, 262, 41, 759, 553, %scale, %scale, true)
	do @scrollXSrc :: wnd@makeScrollX(@drawEditor, 0, 536, 742, 17, %scale, %move)
	do @scrollXSrc.setState(0, 0, 1, 0)
	do @scrollYSrc :: wnd@makeScrollY(@drawEditor, 742, 0, 17, 536, %move, %scale)
	do @scrollYSrc.setState(0, 0, 1, 0)
	do @editHint :: wnd@makeEdit(@wndMain, 262, 600, 759, 15, %scale, %move)
	do @editHint.readonly(true)
	do @listRb :: wnd@makeListView(@wndMain, 262, 621, 391, 135, %scale, %move, false, null, null)
	do @listRb.setVisible(false)
	do @listRb.onMouseClick :: listRbOnMouseClick
	
	func listRbOnMouseClick(wnd: wnd@WndBase)
		do \src@curDoc.onEvent(%listRbOnMouseClick)
	end func
	
	do @groupRbAr :: wnd@makeGroup(@wndMain, 262, 621, 391, 135, %scale, %move, "")
	do @groupRbAr.setVisible(false)
	
	do @labelRbArName :: wnd@makeLabel(@groupRbAr, 6, 21, 35, 12, %fix, %fix, \common@langEn ?("Name", "名前"))
	do @editRbArName :: wnd@makeEdit(@groupRbAr, 65, 18, 95, 19, %fix, %fix)
	do @editRbArName.onFocus :: editRbArNameOnFocus
	do @chkRbArVisible :: wnd@makeChk(@groupRbAr, 183, 20, 80, 16, %fix, %fix, \common@langEn ?("Visible", "表示"))
	do @chkRbArVisible.onPush :: chkRbArVisibleOnPush
	do @labelRbArPos :: wnd@makeLabel(@groupRbAr, 6, 46, 35, 12, %fix, %fix, \common@langEn ?("Position", "位置"))
	do @editRbArX :: wnd@makeEdit(@groupRbAr, 65, 43, 36, 19, %fix, %fix)
	do @editRbArX.onFocus :: editRbArXOnFocus
	do @labelRbArMul1 :: wnd@makeLabel(@groupRbAr, 107, 46, 11, 12, %fix, %fix, "x")
	do @editRbArY :: wnd@makeEdit(@groupRbAr, 124, 43, 36, 19, %fix, %fix)
	do @editRbArY.onFocus :: editRbArYOnFocus
	do @labelRbArSub :: wnd@makeLabel(@groupRbAr, 166, 46, 11, 12, %fix, %fix, "-")
	do @editRbArWidth :: wnd@makeEdit(@groupRbAr, 183, 43, 36, 19, %fix, %fix)
	do @editRbArWidth.onFocus :: editRbArWidthOnFocus
	do @labelRbArMul2 :: wnd@makeLabel(@groupRbAr, 225, 46, 11, 12, %fix, %fix, "x")
	do @editRbArHeight :: wnd@makeEdit(@groupRbAr, 242, 43, 36, 19, %fix, %fix)
	do @editRbArHeight.onFocus :: editRbArHeightOnFocus
	do @btnRbArProp :: wnd@makeBtn(@groupRbAr, 6, 68, 152, 23, %fix, %fix, \common@langEn ?("Edit Properties...", "プロパティの編集..."))
	do @btnRbArProp.onPush :: btnRbArPropOnPush
	do @chkRbArSnap :: wnd@makeChk(@groupRbAr, 6, 110, 112, 16, %fix, %fix, \common@langEn ?("Snap to Grid:", "グリッドに吸着:"))
	do @chkRbArSnap.onPush :: chkRbArSnapOnPush
	do @editRbArSnap :: wnd@makeEdit(@groupRbAr, 124, 110, 36, 19, %fix, %fix)
	do @editRbArSnap.onFocus :: editRbArSnapOnFocus
	do @labelRbArZoom :: wnd@makeLabel(@groupRbAr, 186, 110, 50, 16, %fix, %fix, \common@langEn ?("Zoom:", "ズーム:"))
	do @editRbArZoom :: wnd@makeEdit(@groupRbAr, 242, 110, 36, 19, %fix, %fix)
	do @editRbArZoom.onFocus :: editRbArZoomOnFocus
	do @btnRbArZoomOut :: wnd@makeBtn(@groupRbAr, 278, 110, 23, 23, %fix, %fix, "-")
	do @btnRbArZoomOut.onPush :: btnRbArZoomOutOnPush
	do @btnRbArZoomIn :: wnd@makeBtn(@groupRbAr, 301, 110, 23, 23, %fix, %fix, "+")
	do @btnRbArZoomIn.onPush :: btnRbArZoomInOnPush
	do @tabOrderRbAr :: wnd@makeTabOrder([@editRbArName $ wnd@WndBase, @editRbArX $ wnd@WndBase, @editRbArY $ wnd@WndBase, @editRbArWidth $ wnd@WndBase, @editRbArHeight $ wnd@WndBase, @editRbArSnap $ wnd@WndBase, @editRbArZoom $ wnd@WndBase])
	
	func editRbArNameOnFocus(wnd: wnd@WndBase, focused: bool)
		if(!focused)
			do \src@curDoc.onEvent(%editRbArNameOnKillFocus)
		end if
	end func
	
	func chkRbArVisibleOnPush(wnd: wnd@WndBase)
		do \src@curDoc.onEvent(%chkRbArVisibleOnPush)
	end func
	
	func editRbArXOnFocus(wnd: wnd@WndBase, focused: bool)
		if(!focused)
			do \src@curDoc.onEvent(%editRbArXOnKillFocus)
		end if
	end func
	
	func editRbArYOnFocus(wnd: wnd@WndBase, focused: bool)
		if(!focused)
			do \src@curDoc.onEvent(%editRbArYOnKillFocus)
		end if
	end func
	
	func editRbArWidthOnFocus(wnd: wnd@WndBase, focused: bool)
		if(!focused)
			do \src@curDoc.onEvent(%editRbArWidthOnKillFocus)
		end if
	end func
	
	func editRbArHeightOnFocus(wnd: wnd@WndBase, focused: bool)
		if(!focused)
			do \src@curDoc.onEvent(%editRbArHeightOnKillFocus)
		end if
	end func
	
	func btnRbArPropOnPush(wnd: wnd@WndBase)
		do \src@curDoc.onEvent(%btnRbArPropOnPush)
	end func
	
	func chkRbArSnapOnPush(wnd: wnd@WndBase)
		do @snap :: @chkRbArSnap.getChk()
		do \prop@changeProp()
		do @updateUi()
	end func
	
	func editRbArSnapOnFocus(wnd: wnd@WndBase, focused: bool)
		if(!focused)
			var success: bool
			var value: int :: @editRbArSnap.getText().trim().toInt(&success)
			if(success)
				if(value < 1)
					do value :: 1
				end if
				if(@snapValue <> value)
					do @snapValue :: value
					do \prop@changeProp()
				end if
			end if
			do @updateUi()
		end if
	end func
	
	func editRbArZoomOnFocus(wnd: wnd@WndBase, focused: bool)
		if(!focused)
			var success: bool
			var value: float :: @editRbArZoom.getText().trim().toFloat(&success)
			if(success)
				if(value < 0.1)
					do value :: 0.1
				end if
				if(value > 8.0)
					do value :: 8.0
				end if
				if(@zoom <> value)
					do @zoom :: value
					do \prop@changeProp()
					do @paintDrawEditor(false)
				end if
			end if
			do @updateUi()
		end if
	end func
	
	func btnRbArZoomOutOnPush(wnd: wnd@WndBase)
		do @wndMainOnPushMenu(@wndMain, 0x0051)
	end func
	
	func btnRbArZoomInOnPush(wnd: wnd@WndBase)
		do @wndMainOnPushMenu(@wndMain, 0x0050)
	end func
	
	do @editLog :: wnd@makeEditMulti(@wndMain, 659, 621, 553, 135, %move, %move)
	do @editLog.readonly(true)
	do @btnCompile :: wnd@makeBtn(@wndMain, 1027, 12, 185, 23, %move, %fix, \common@langEn ?("Compile && Run", "コンパイル＆実行"))
	do @btnCompile.onPush :: @btnCompileOnPush
	do @groupConfig :: wnd@makeGroup(@wndMain, 1027, 41, 185, 115, %move, %fix, \common@langEn ?("Configuration", "設定"))
	do @groupEnv :: wnd@makeGroup(@wndMain, 1033, 59, 173, 62, %move, %fix, \common@langEn ?("Environment", "実行環境"))
	do @radioEnvWnd :: wnd@makeRadio(@groupEnv, 6, 18, 161, 16, %fix, %fix, \common@langEn ?("Window", "ウインドウ"))
	do @radioEnvWnd.setChk(true)
	do @radioEnvWnd.onPush :: @radioEnvOnPush
	do @radioEnvCui :: wnd@makeRadio(@groupEnv, 6, 40, 161, 16, %fix, %fix, \common@langEn ?("CUI", "CUI"))
	do @radioEnvCui.onPush :: @radioEnvOnPush
	do @btnProjSettings :: wnd@makeBtn(@wndMain, 1033, 127, 120, 23, %move, %fix, \common@langEn ?("Other Settings...", "その他の設定..."))
	do @btnProjSettings.onPush :: btnProjSettingsOnPush
	do @btnRls :: wnd@makeBtn(@wndMain, 1027, 162, 185, 23, %move, %fix, \common@langEn ?("Release Build...", "リリースビルド..."))
	do @btnRls.onPush :: @btnRlsOnPush
	do @listFile :: wnd@makeList(@wndMain, 1027, 255, 185, 337, %move, %scale)
	do @listFile.onSel :: @listFileOnSel
	do @btnFileAdd :: wnd@makeBtn(@wndMain, 1027, 592, 60, 23, %move, %move, \common@langEn ?("Add", "追加"))
	do @btnFileAdd.onPush :: btnFileAddOnPush
	do @btnFileDel :: wnd@makeBtn(@wndMain, 1087, 592, 60, 23, %move, %move, \common@langEn ?("Remove", "削除"))
	do @btnFileDel.onPush :: btnFileDelOnPush
	do @menuMain :: wnd@makeMenu()
	do @popupMainFile :: wnd@makePopup()
	do @popupMainFile.add(0x0001, \common@langEn ?("&New\tCtrl+N", "新規作成(&N)\tCtrl+N"))
	do @popupMainFile.add(0x0002, \common@langEn ?("&Load...\tCtrl+O", "開く(&O)...\tCtrl+O"))
	do @popupMainFile.addLine()
	do @popupMainFile.add(0x0003, \common@langEn ?("&Save All\tCtrl+S", "すべて保存(&S)\tCtrl+S"))
	do @popupMainFile.add(0x0004, \common@langEn ?("Save &As...\tCtrl+Shift+S", "名前を付けて保存(&A)...\tCtrl+Shift+S"))
	do @popupMainFile.addLine()
	do @popupRecentFiles :: wnd@makePopup()
	do @popupMainFile.addPopup(\common@langEn ?("Recent &Files", "最近使ったファイル(&F)"), @popupRecentFiles)
	do @popupMainFile.addLine()
	do @popupMainFile.add(0x0005, \common@langEn ?("E&xit\tCtrl+Q", "終了(&E)\tCtrl+Q"))
	do @menuMain.addPopup(\common@langEn ?("&File", "ファイル(&F)"), @popupMainFile)
	do @popupMainEdit :: wnd@makePopup()
	do @popupMainEdit.add(0x0030, \common@langEn ?("Add Ne&w File...\tCtrl+Shift+A", "新しいファイルを追加(&W)...\tCtrl+Shift+A"))
	do @popupMainEdit.add(0x0031, \common@langEn ?("Add Existin...&g File", "既存のファイルを追加(&G)..."))
	do @popupMainEdit.addLine()
	do @popupMainEdit.add(0x003E, \common@langEn ?("&Open \"res\" Folder...\tCtrl+Shift+R", "「res」フォルダを開く(&O)...\tCtrl+Shift+R"))
	do @popupMainEdit.addLine()
	do @popupMainEdit.add(0x0032, \common@langEn ?("&Undo\tCtrl+Z", "元に戻す(&U)\tCtrl+Z"))
	do @popupMainEdit.add(0x0033, \common@langEn ?("&Redo\tCtrl+Shift+Z, Ctrl+Y", "やり直し(&R)\tCtrl+Shift+Z, Ctrl+Y"))
	do @popupMainEdit.addLine()
	do @popupMainEdit.add(0x0034, \common@langEn ?("Cu&t\tCtrl+X", "切り取り(&T)\tCtrl+X"))
	do @popupMainEdit.add(0x0035, \common@langEn ?("&Copy\tCtrl+C", "コピー(&C)\tCtrl+C"))
	do @popupMainEdit.add(0x0036, \common@langEn ?("&Paste\tCtrl+V", "貼り付け(&P)\tCtrl+V"))
	do @popupMainEdit.add(0x0037, \common@langEn ?("&Delete\tDel", "削除(&D)\tDel"))
	do @popupMainEdit.add(0x0038, \common@langEn ?("Select &All\tCtrl+A", "すべて選択(&A)\tCtrl+A"))
	do @popupMainEdit.addLine()
	do @popupMainEdit.add(0x003D, \common@langEn ?("Add &Selection To Snippets...", "選択範囲をスニペットに追加(&S)..."))
	do @popupMainEdit.add(0x003F, \common@langEn ?("&Edit Snippets...", "スニペットの編集(&E)..."))
	do @popupMainEdit.addLine()
	do @popupMainEdit.add(0x0039, \common@langEn ?("&Find...\tCtrl+F", "検索(&F)...\tCtrl+F"))
	do @popupMainEdit.add(0x003A, \common@langEn ?("&Replace...\tCtrl+H", "置換(&R)...\tCtrl+H"))
	do @popupMainEdit.add(0x003B, \common@langEn ?("Find Pre&vious\tShift+F3", "前を検索(&V)\tShift+F3"))
	do @popupMainEdit.add(0x003C, \common@langEn ?("Find &Next\tF3", "次を検索(&N)\tF3"))
	do @popupMainEdit.add(0x0041, \common@langEn ?("&Go To Line...\tCtrl+G", "指定行へ移動(&G)...\tCtrl+G"))
	do @popupMainEdit.addLine()
	do @popupMainEdit.add(0x0060, \common@langEn ?("Other Settings...", "その他の設定..."))
	do @menuMain.addPopup(\common@langEn ?("&Edit", "編集(&E)"), @popupMainEdit)
	do @popupMainBuild :: wnd@makePopup()
	do @popupMainBuild.add(0x0020, \common@langEn ?("&Compile && Run\tF5", "コンパイル＆実行(&C)\tF5"))
	do @popupMainBuild.addLine()
	do @popupMainBuild.add(0x0021, \common@langEn ?("&Release Build...\tCtrl+Shift+B", "リリースビルド(&R)...\tCtrl+Shift+B"))
	do @popupMainBuild.addLine()
	do @popupMainBuild.add(0x0022, \common@langEn ?("Output C++ &Source Code...", "C++のソースコードを出力(試験中)(&S)..."))
	do @popupMainBuild.add(0x0023, \common@langEn ?("Output &JavaScript Source Code...", "JavaScriptのソースコードを出力(試験中)(&J)..."))
	do @menuMain.addPopup(\common@langEn ?("&Build", "ビルド(&B)"), @popupMainBuild)
	do @popupMainDbg :: wnd@makePopup()
	do @popupMainDbg.add(0x0040, \common@langEn ?("Toggle &Breakpoint\tF9", "ブレークポイントの設定/解除(&B)\tF9"))
	do @menuMain.addPopup(\common@langEn ?("&Debug", "デバッグ(&D)"), @popupMainDbg)
	do @popupMainTools :: wnd@makePopup()
	do @popupMainTools.add(0x0070, \common@langEn ?("3D &Model Converter...", "3D モデルコンバータ(&M)..."))
	do @menuMain.addPopup(\common@langEn ?("&Tools", "ツール(&T)"), @popupMainTools)
	do @popupMainHelp :: wnd@makePopup()
	do @popupMainHelp.add(0x0010, \common@langEn ?("&View Help\tF1", "ヘルプの表示(&V)\tF1"))
	do @popupMainHelp.addLine()
	do @popupMainHelp.add(0x0011, \common@langEn ?("&About Kuin...", "Kuinについて(&A)..."))
	do @menuMain.addPopup(\common@langEn ?("&Help", "ヘルプ(&H)"), @popupMainHelp)
	do @wndMain.setMenu(@menuMain)
	
	do @popupMainArranger :: wnd@makePopup()
	do @popupMainArranger.add(0x0050, \common@langEn ?("Zoom &In\tCtrl++", "ズームイン(&I)\tCtrl++"))
	do @popupMainArranger.add(0x0051, \common@langEn ?("Zoom &Out\tCtrl+-", "ズームアウト(&O)\tCtrl+-"))
	do @popupMainArranger.add(0x0052, "&100%\tCtrl+1")
	
	do wnd@setOnKeyPress(@onKeyPress)
	
	do @lockingEditor :: false
	do @lockUi :: false
	do @editLog.setText("")
	do @drag :: false
	do @snap :: true
	do @snapValue :: 5
	do @zoom :: 1.0
	do @iconPath :: ""
	do @relatedFiles :: #list<[]char>
	do @redrawingRequired :: false
	do @interpret2Required :: false
	do @completionRequired :: false
	
	func btnFileAddOnPush(wnd: wnd@WndBase)
		do @wndMainOnPushMenu(@wndMain, 0x0030)
	end func
	
	func btnFileDelOnPush(wnd: wnd@WndBase)
		if("\\" ~ file@delExt(file@fileName(\src@mainSrcPath)) = \src@curDocName)
			do wnd@msgBox(@wndMain, \common@langEn ?("The main source file cannot be deleted.", "メインのソースファイルは削除できません。"), \common@title, %err, %ok)
			ret
		end if
		if(wnd@msgBox(@wndMain, \common@langEn ?("Do you want to remove the file '\{\src@curDocName}' from the list?", "リストからファイル「\{\src@curDocName}」を削除しますか？"), \common@title, %none, %yesNoCancel) <> %yes)
			ret
		end if
		if(\src@chkChanged())
			do \src@docs.del(\src@getDocName(\src@curDoc))
			do \src@setCurSrc(\src@mainDoc())
		end if
	end func
	
	func btnProjSettingsOnPush(wnd: wnd@WndBase)
		do @wndMainOnPushMenu(@wndMain, 0x0060)
	end func
end func

+func init()
	do @drawEditor.onPaint :: @drawEditorOnPaint
	do @drawEditor.onMouseDownL :: @drawEditorOnMouseDownL
	do @drawEditor.onMouseUpL :: @drawEditorOnMouseUpL
	do @drawEditor.onMouseDoubleClick :: @drawEditorOnMouseDoubleClick
	do @drawEditor.onMouseMove :: @drawEditorOnMouseMove
	do @drawEditor.onFocus :: @drawEditorOnFocus
	do @drawEditor.onKeyDown :: @drawEditorOnKeyDown
	do @drawEditor.onKeyUp :: @drawEditorOnKeyUp
	do @drawEditor.onKeyChar :: @drawEditorOnKeyChar
	do @drawEditor.onScrollX :: @drawEditorOnScrollX
	do @drawEditor.onScrollY :: @drawEditorOnScrollY
	do @drawEditor.onMouseWheelX :: @drawEditorOnMouseWheelX
	do @drawEditor.onMouseWheelY :: @drawEditorOnMouseWheelY
	do @drawEditor.onSetMouseImg :: @drawEditorOnSetMouseImg
	do @wndMain.focus()
	do @drawEditor.focus()
end func

func onKeyPress(key: wnd@Key, shiftCtrl: wnd@ShiftCtrl): bool
	if(\find@wndFind <>& null & \find@wndFind.focusedWnd())
		switch(shiftCtrl)
		case %none
			switch(key)
			case %enter
				do \find@findNext()
				ret true
			case %esc
				do \find@wndFind.close()
				ret true
			case %f3
				do @wndMainOnPushMenu(@wndMain, 0x003C)
				ret true
			end switch
		case %shift
			switch(key)
			case %f3
				do @wndMainOnPushMenu(@wndMain, 0x003B)
				ret true
			end switch
		case %ctrl
			switch(key)
			case %f
				do @wndMainOnPushMenu(@wndMain, 0x0039)
				ret true
			case %g
				do @wndMainOnPushMenu(@wndMain, 0x0041)
				ret true
			case %h
				do @wndMainOnPushMenu(@wndMain, 0x003A)
				ret true
			end switch
		end switch
		if(\find@runTabOrder(key, shiftCtrl))
			ret true
		end if
	elif(@wndMain.focusedWnd() | \completion@focused())
		var editRbArFocused: bool :: @editRbArName.focused() | @editRbArX.focused() | @editRbArY.focused() | @editRbArWidth.focused() | @editRbArHeight.focused() | @editRbArSnap.focused() | @editRbArZoom.focused()
		var editFocused: bool :: @editFile.focused() | @editHint.focused() | editRbArFocused
		switch(shiftCtrl)
		case %none
			switch(key)
			case %del
				if(!editFocused)
					do @wndMainOnPushMenu(@wndMain, 0x0037)
					ret true
				end if
			case %esc
				if(\completion@displayed())
					do \completion@close()
					ret true
				elif(\find@wndFind <>& null)
					do \find@wndFind.close()
					ret true
				end if
			case %f1
				do @wndMainOnPushMenu(@wndMain, 0x0010)
				ret true
			case %f3
				do @wndMainOnPushMenu(@wndMain, 0x003C)
				ret true
			case %f5
				do @wndMainOnPushMenu(@wndMain, 0x0020)
				ret true
			case %f9
				do @wndMainOnPushMenu(@wndMain, 0x0040)
				ret true
			case %f12
				var definitionPos: \src@Pos :: \completion@getDefinitionPos()
				if(definitionPos <>& null & \src@jumpSrc(definitionPos))
					ret true
				end if
			case %tab, %enter
				if(editRbArFocused & @tabOrderRbAr.chk(%tab, shiftCtrl))
					ret true
				end if
			end switch
		case %shift
			switch(key)
			case %f3
				do @wndMainOnPushMenu(@wndMain, 0x003B)
				ret true
			case %tab, %enter
				if(editRbArFocused & @tabOrderRbAr.chk(%tab, shiftCtrl))
					ret true
				end if
			end switch
		case %ctrl
			switch(key)
			case %a
				if(!editFocused)
					do @wndMainOnPushMenu(@wndMain, 0x0038)
					ret true
				end if
			case %c
				if(!editFocused)
					do @wndMainOnPushMenu(@wndMain, 0x0035)
					ret true
				end if
			case %f
				do @wndMainOnPushMenu(@wndMain, 0x0039)
				ret true
			case %g
				do @wndMainOnPushMenu(@wndMain, 0x0041)
				ret true
			case %h
				do @wndMainOnPushMenu(@wndMain, 0x003A)
				ret true
			case %n
				do @wndMainOnPushMenu(@wndMain, 0x0001)
				ret true
			case %o
				do @wndMainOnPushMenu(@wndMain, 0x0002)
				ret true
			case %s
				do @wndMainOnPushMenu(@wndMain, 0x0003)
				ret true
			case %q
				do @wndMainOnPushMenu(@wndMain, 0x0005)
				ret true
			case %v
				if(!editFocused)
					do @wndMainOnPushMenu(@wndMain, 0x0036)
					ret true
				end if
			case %x
				if(!editFocused)
					do @wndMainOnPushMenu(@wndMain, 0x0034)
					ret true
				end if
			case %y
				if(!editFocused)
					do @wndMainOnPushMenu(@wndMain, 0x0033)
					ret true
				end if
			case %z
				if(!editFocused)
					do @wndMainOnPushMenu(@wndMain, 0x0032)
					ret true
				end if
			case %plus
				if(!editFocused)
					do @wndMainOnPushMenu(@wndMain, 0x0050)
					ret true
				end if
			case %minus
				if(!editFocused)
					do @wndMainOnPushMenu(@wndMain, 0x0051)
					ret true
				end if
			case %_1
				if(!editFocused)
					do @wndMainOnPushMenu(@wndMain, 0x0052)
					ret true
				end if
			end switch
		case (%shift $ wnd@ShiftCtrl).or(%ctrl)
			switch(key)
			case %a
				do @wndMainOnPushMenu(@wndMain, 0x0030)
				ret true
			case %b
				do @wndMainOnPushMenu(@wndMain, 0x0021)
				ret true
			case %r
				do @wndMainOnPushMenu(@wndMain, 0x003E)
				ret true
			case %s
				do @wndMainOnPushMenu(@wndMain, 0x0004)
				ret true
			case %z
				if(!editFocused)
					do @wndMainOnPushMenu(@wndMain, 0x0033)
					ret true
				end if
			end switch
		end switch
		if(\completion@displayed() & key <> %ctrl & !editFocused)
			ret \src@curDoc.keyDown(key, shiftCtrl)
		end if
	elif(\go_to_line@wndGoToLine <>& null & \go_to_line@wndGoToLine.focusedWnd())
		switch(shiftCtrl)
		case %none
			switch(key)
			case %esc
				do \go_to_line@wndGoToLine.close()
				ret true
			case %enter
				do \go_to_line@goToLine()
				ret true
			case %bs, %del
				ret false
			case %up, %right, %down, %left
				ret false
			case %_0 to %_9
				ret false
			end switch
			ret true
		end switch
	elif(\obj_prop@wndObjProp <>& null & \obj_prop@wndObjProp.focusedWnd())
		if(key = %tab | key = %enter)
			if(\obj_prop@runTabOrder(%tab, shiftCtrl))
				ret true
			end if
		end if
	end if
	ret false
end func

func wndMainOnClose(wnd: wnd@WndBase): bool
	if(@lockingEditor)
		do @showMsgRunning()
		ret false
	end if
	if(\src@chkChanged())
		do \src@delRunningFiles()
		var dir: []char :: wnd@sysDir(%appData) ~ "Kuin/"
		try
			do file@delDir(dir)
		catch
		end try
		ret true
	end if
	ret false
end func

func wndMainOnActivate(wnd: wnd@WndBase, active: bool, minimized: bool)
	if(active & !minimized & @drawEditor <>& null)
		do @drawEditor.focus()
	end if
end func

func wndMainOnPushMenu(wnd: wnd@WndBase, id: int)
	switch(id)
	case 0x0001
		if(@lockingEditor)
			do @showMsgRunning()
			ret
		end if
		if(\src@chkChanged())
			do \src@newMainSrc()
		end if
	case 0x0002
		if(@lockingEditor)
			do @showMsgRunning()
			ret
		end if
		if(\src@chkChanged())
			var file: []char :: wnd@openFileDialog(@wndMain, [\common@langEn ?("Kuin source code (*.kn)", "Kuinソースコード (*.kn)"), "*.kn"], 0)
			if(file <>& null)
				do \src@openMainSrc(file)
				do \recent@save(file)
			end if
		end if
	case 0x0003
		do \src@save(false)
	case 0x0004
		do \src@save(true)
	case 0x0005
		do @wndMain.close()
	case 0x0010
		do task@open("https://kuina.ch/kuin")
	case 0x0011
		block
			var major: int
			var minor: int
			var micro: int
			do \dll@version(&major, &minor, &micro)
			do wnd@msgBox(@wndMain, "Kuin Programming Language\nVersion \{major}.\{minor}.\{micro}\n(C)Kuina-chan", \common@title, %info, %ok)
		end block
	case 0x0020
		do @btnCompileOnPush(@btnCompile)
	case 0x0021
		if(@lockingEditor)
			do @showMsgRunning()
			ret
		end if
		do @btnRlsOnPush(@btnRls)
	case 0x0022
		if(@lockingEditor)
			do @showMsgRunning()
			ret
		end if
		do @outputSourceCode(%cpp)
	case 0x0023
		if(@lockingEditor)
			do @showMsgRunning()
			ret
		end if
		do @outputSourceCode(%web)
	case 0x0030
		if(@lockingEditor)
			do @showMsgRunning()
			ret
		end if
		do \add_file@addNewFile()
	case 0x0031
		if(@lockingEditor)
			do @showMsgRunning()
			ret
		end if
		do \add_file@addExistingFile()
	case 0x0032
		do \src@curDoc.cmdUndo()
	case 0x0033
		do \src@curDoc.cmdRedo()
	case 0x0034
		do \src@curDoc.cmdCut()
	case 0x0035
		do \src@curDoc.cmdCopy()
	case 0x0036
		do \src@curDoc.cmdPaste()
	case 0x0037
		do \src@curDoc.cmdDel()
	case 0x0038
		do \src@curDoc.cmdSelAll()
	case 0x0039
		do \find@show(false, \src@curDoc.getCursorWord())
	case 0x003A
		do \find@show(true, \src@curDoc.getCursorWord())
	case 0x003B
		do \find@findPrev()
	case 0x003C
		do \find@findNext()
	case 0x003D
		do \snippet@add(\src@curDoc.getSelCode())
		do \src@curDoc.fix(false)
	case 0x003E
		if(@lockingEditor)
			do @showMsgRunning()
			ret
		end if
		do @openResFolder()
	case 0x003F
		do \snippet@showSnippet()
	case 0x0040
		if(\src@curDoc =$ \doc_src@DocSrc)
			if(\src@breakPos =& null & @lockingEditor)
				do @showMsgRunning()
				ret
			end if
			do(\src@curDoc $ \doc_src@DocSrc).toggleBreakPoint()
		end if
	case 0x0041
		do \go_to_line@show()
	case 0x0050
		if(@zoom < 0.25)
			do @zoom :: 0.25
		elif(@zoom < 0.33)
			do @zoom :: 0.33
		elif(@zoom < 0.5)
			do @zoom :: 0.5
		elif(@zoom < 1.0)
			do @zoom :: 1.0
		elif(@zoom < 2.0)
			do @zoom :: 2.0
		elif(@zoom < 4.0)
			do @zoom :: 4.0
		elif(@zoom < 8.0)
			do @zoom :: 8.0
		end if
		do \prop@changeProp()
		do @paintDrawEditor(false)
		do @updateUi()
	case 0x0051
		if(@zoom > 4.0)
			do @zoom :: 4.0
		elif(@zoom > 2.0)
			do @zoom :: 2.0
		elif(@zoom > 1.0)
			do @zoom :: 1.0
		elif(@zoom > 0.5)
			do @zoom :: 0.5
		elif(@zoom > 0.33)
			do @zoom :: 0.33
		elif(@zoom > 0.25)
			do @zoom :: 0.25
		elif(@zoom > 0.1)
			do @zoom :: 0.1
		end if
		do \prop@changeProp()
		do @paintDrawEditor(false)
		do @updateUi()
	case 0x0052
		if(@zoom <> 1.0)
			do @zoom :: 1.0
			do \prop@changeProp()
			do @paintDrawEditor(false)
		end if
		do @updateUi()
	case 0x0060
		if(@lockingEditor)
			do @showMsgRunning()
			ret
		end if
		do \proj_settings@show()
	case 0x0070
		do \knobj_maker@show()
	case 0x0400 to 0x04FF
		do \recent@sel(id)
	end switch
end func

func wndMainOnDropFiles(wnd: wnd@WndBase, files: [][]char)
	if(^files <= 0 | file@ext(files[0]) <> "kn")
		ret
	end if
	if(@lockingEditor)
		do @showMsgRunning()
		ret
	end if
	if(\src@chkChanged())
		do \src@openMainSrc(files[0])
		do \recent@save(files[0])
	end if
end func

func wndMainOnResize(wnd: wnd@WndBase)
	if(!@lockUi)
		do @updateUi()
	end if
end func

var test: bool

func btnCodeOnPush(wnd: wnd@WndBase)
	if(@lockUi)
		ret
	end if
	do @lockUi :: true
	if(\src@curDoc =$ \doc_gen@DocGen)
		do(\src@curDoc $ \doc_gen@DocGen).swapMode()
	end if
	do @lockUi :: false
	do @updateUi()
	do @paintDrawEditor(false)
end func

func drawEditorOnPaint(wnd: wnd@WndBase, width: int, height: int)
	do \src@curDoc.draw(width, height)
	do draw@render(0)
end func

func drawEditorOnMouseDownL(wnd: wnd@WndBase, x: int, y: int)
	do @drag :: true
	do \src@curDoc.mouseDownL(x, y)
	do @drawEditor.mouseCapture(true)
end func

func drawEditorOnMouseUpL(wnd: wnd@WndBase, x: int, y: int)
	do @drag :: false
	do \src@curDoc.mouseUpL(x, y)
	do @drawEditor.mouseCapture(false)
end func

func drawEditorOnMouseDoubleClick(wnd: wnd@WndBase, x: int, y: int)
	do \src@curDoc.mouseDoubleClick(x, y)
end func

func drawEditorOnMouseMove(wnd: wnd@WndBase, x: int, y: int)
	do \src@curDoc.mouseMove(x, y)
end func

func drawEditorOnFocus(wnd: wnd@WndBase, focus: bool)
	do \src@curDoc.focus(focus)
end func

func drawEditorOnKeyDown(wnd: wnd@WndBase, key: wnd@Key, shiftCtrl: wnd@ShiftCtrl)
	do \src@curDoc.keyDown(key, shiftCtrl)
end func

func drawEditorOnKeyUp(wnd: wnd@WndBase, key: wnd@Key, shiftCtrl: wnd@ShiftCtrl)
	do \src@curDoc.keyUp(key, shiftCtrl)
end func

func drawEditorOnKeyChar(wnd: wnd@WndBase, key: char)
	do \src@curDoc.keyChar(key)
end func

func drawEditorOnScrollX(wnd: wnd@WndBase, pos: int)
	do \src@curDoc.scrollX(pos)
end func

func drawEditorOnScrollY(wnd: wnd@WndBase, pos: int)
	do \src@curDoc.scrollY(pos)
end func

func drawEditorOnMouseWheelX(wnd: wnd@WndBase, wheel: int)
	do \src@curDoc.wheelX(wheel)
end func

func drawEditorOnMouseWheelY(wnd: wnd@WndBase, wheel: int)
	do \src@curDoc.wheelY(wheel)
end func

func drawEditorOnSetMouseImg(wnd: wnd@WndBase): wnd@MouseImg
	ret \src@curDoc.setMouseImg()
end func

func btnCompileOnPush(wnd: wnd@WndBase)
	if(@lockingEditor)
		if(\src@breakPos <>& null)
			do \src@breakPos :: null
			ret
		end if
		do @showMsgRunning()
		ret
	end if
	do @lockEditor(true)
	var tmp: []char :: wnd@sysDir(%appData) ~ "Kuin/" ~ \src@addRunningFileName() ~ "/"
	var out: []char :: tmp ~ "out.exe"
	try
		do file@makeDir(tmp)
	catch
		var msg: []char
		if(\common@langEn)
			do msg :: "Could not delete. " ~ tmp
		else
			do msg :: "削除できませんでした。 " ~ tmp
		end if
		do wnd@msgBox(@wndMain, msg, \common@title, %err, %ok)
		ret
	end try
	do \src@docs.forEach(@fixAll, null)
	do @updateState()
	if(\dll@interpret2Running())
		do \dll@waitEndOfInterpret2()
	end if
	do \dll@resetMemAllocator()
	do @editLog.setText("")
	var cmd: []char :: out
	try
		do \src@resetErrList()
		var option: list<[]char> :: #list<[]char>
		do option.add("-i")
		do option.add(\src@mainSrcPath)
		do option.add("-o")
		do option.add(out)
		if(@iconPath <> "")
			do option.add("-c")
			do option.add(@iconPath)
		end if
		do option.add("-x")
		do option.add("hint")
		do @addEnv(option)
		do @makeRelatedFileText(tmp ~ "_related_files_.txt", option)
		if(\dll@build(option.toArray(), \src@getSrc, @log))
			do file@delFile(tmp ~ "_related_files_.txt")
			if(\src@mainSrcDir <> \common@defaultDir)
				var filePtr: file@Writer :: file@makeWriter(tmp ~ "_resdir_.txt", false)
				do filePtr.writeStr(\src@mainSrcDir)
				do filePtr.writeChar('\n')
				do filePtr.fin()
			end if
			do @editLog.addText(\common@langEn ?("0x0003FFFF: Run.", "0x0003FFFF: 実行。\n"))
			do \dbgwnd@show()
			if(\dll@runDbg(cmd, null, idleFunc, eventFunc, breakPointsFunc, breakFunc, dbgFunc))
				do @editLog.addText(\common@langEn ?("\n0x0003FFFF: Succees.\n", "\n0x0003FFFF: 正常終了。\n"))
			else
				do @editLog.addText(\common@langEn ?("\n0x0003FFFF: Failure.\n", "\n0x0003FFFF: 実行失敗。\n"))
				do wnd@msgBox(@wndMain, \common@langEn ?("Could not run.", "実行できませんでした。"), \common@title, %err, %ok)
			end if
			do \src@delRunningFiles()
		end if
		do \src@updateErrList()
	catch
		do wnd@msgBox(@wndMain, \common@langEn ?("Unexpected error.", "予期せぬエラーです。"), \common@title, %err, %ok)
	end try
	if(\dbgwnd@wndDbg <>& null)
		do \dbgwnd@wndDbg.close()
	end if
	do @updateUi()
	do @lockEditor(false)
	do @wndMain.activate()
	
	func idleFunc()
		do wnd@act()
	end func
	
	func eventFunc(type: int, str: []char): int
		switch(type)
		case 0
			do @editLog.addText(str.sub(4, -1))
		end switch
	end func
	
	func breakPointsFunc()
		class BreakPoint()
			+var items: list<\src@Pos>
		end class
		
		var breakPoint: BreakPoint :: #BreakPoint
		do breakPoint.items :: #list<\src@Pos>
		do \src@docs.forEach(callback, breakPoint)
		var itemsArray: []\src@Pos :: breakPoint.items.toArray()
		for i(0, ^itemsArray - 1)
			do(\src@docs.get(itemsArray[i].src, &) $ \doc_src@DocSrc).unsetBreakPoint(itemsArray[i].row - 1)
		end for
		do \dll@setBreakPoints(itemsArray)
		for i(0, ^itemsArray - 1)
			if(itemsArray[i].row <> -1)
				do(\src@docs.get(itemsArray[i].src, &) $ \doc_src@DocSrc).setBreakPoint(itemsArray[i].row - 1)
			end if
		end for
		do @paintDrawEditor(false)
		
		func callback(key: []char, value: \doc@Doc, data: kuin@Class): bool
			var data2: BreakPoint :: data $ BreakPoint
			if(value =$ \doc_src@DocSrc & key[0] = '\\')
				do(value $ \doc_src@DocSrc).getBreakPoints(key, data2.items)
			end if
			ret true
		end func
	end func
	
	func breakFunc(code: int, pos: \src@Pos, msg: []char)
		do \dbgwnd@setMsg(msg)
		if(code <> 0x80000003)
			do wnd@msgBox(@wndMain, msg, \common@title, %err, %ok)
		end if
		if(pos =& null)
			ret
		end if
		var pos2: \src@Pos :: #\src@Pos
		do pos2.src :: ##pos.src
		do pos2.row :: pos.row
		do pos2.col :: pos.col
		do \src@breakPos :: pos2
		do @btnCompile.setText(\common@langEn ?("Continue", "続行"))
		do @btnCompile.setEnabled(true)
		if(!\src@jumpSrc(pos))
			do @paintDrawEditor(false)
			do @focusDrawEditor()
		end if
		while(\src@breakPos <>& null & wnd@act())
			do @updateState()
		end while
		do @btnCompile.setEnabled(false)
		do @btnCompile.setText(\common@langEn ?("Compile && Run", "コンパイル＆実行"))
	end func
	
	func dbgFunc(mode: int, str1: []char, str2: []char)
		switch(mode)
		case 0
			do \dbgwnd@clear()
		case 1
			do \dbgwnd@addWatch(str1, str2)
		case 2
			do \dbgwnd@addCallStack(str1)
		end switch
	end func
end func

func radioEnvOnPush(wnd: wnd@WndBase)
	if(@lockUi)
		ret
	end if
	do \prop@changeProp()
end func

func btnRlsOnPush(wnd: wnd@WndBase)
	if(@lockingEditor)
		do @showMsgRunning()
		ret
	end if
	var file: []char :: wnd@saveFileDialog(@wndMain, [\common@langEn ?("Archive file (*.zip)", "アーカイブファイル (*.zip)"), "*.zip"], 0, "zip")
	if(file =& null)
		ret
	end if
	do @lockEditor(true)
	var fileName: []char :: file@delExt(file@fileName(file))
	var tmp: []char :: wnd@sysDir(%appData) ~ "Kuin/" ~ \src@addRunningFileName() ~ "/" ~ fileName ~ "/"
	var out: []char :: tmp ~ fileName ~ ".exe"
	try
		do file@makeDir(tmp)
	catch
		var msg: []char
		if(\common@langEn)
			do msg :: "Could not delete. " ~ tmp
		else
			do msg :: "削除できませんでした。 " ~ tmp
		end if
		do wnd@msgBox(@wndMain, msg, \common@title, %err, %ok)
		ret
	end try
	do \src@docs.forEach(@fixAll, null)
	do @updateState()
	if(\dll@interpret2Running())
		do \dll@waitEndOfInterpret2()
	end if
	do \dll@resetMemAllocator()
	do @editLog.setText("")
	try
		do \src@resetErrList()
		var option: list<[]char> :: #list<[]char>
		do option.add("-i")
		do option.add(\src@mainSrcPath)
		do option.add("-o")
		do option.add(out)
		if(@iconPath <> "")
			do option.add("-c")
			do option.add(@iconPath)
		end if
		do option.add("-r")
		do @addEnv(option)
		do @makeRelatedFileText(tmp ~ "_related_files_.txt", option)
		if(\dll@build(option.toArray(), \src@getSrc, @log))
			do file@delFile(tmp ~ "_related_files_.txt")
			if(zip@zip(file, tmp, -1))
				do wnd@msgBox(@wndMain, \common@langEn ?("The build succeeded.", "ビルドが成功しました。"), \common@title, %info, %ok)
			else
				var msg: []char
				if(\common@langEn)
					do msg :: "Could not make the archive file. " ~ file
				else
					do msg :: "アーカイブファイルを作成できませんでした。 " ~ file
				end if
				do wnd@msgBox(@wndMain, msg, \common@title, %err, %ok)
				ret
			end if
			do \src@delRunningFiles()
		end if
		do \src@updateErrList()
	catch
		do wnd@msgBox(@wndMain, \common@langEn ?("Unexpected error.", "予期せぬエラーです。"), \common@title, %err, %ok)
	end try
	do @updateUi()
	do @lockEditor(false)
end func

func outputSourceCode(sourceCodeKind: @SourceCodeKind)
	if(@lockingEditor)
		do @showMsgRunning()
		ret
	end if
	var file: []char
	switch(sourceCodeKind)
	case %cpp
		do file :: wnd@saveFileDialog(@wndMain, [\common@langEn ?("C++ Source Code (*.cpp)", "C++ソースコード (*.cpp)"), "*.cpp"], 0, "cpp")
	case %web
		do file :: wnd@saveFileDialog(@wndMain, [\common@langEn ?("HTML File (*.html)", "HTML File (*.html)"), "*.html"], 0, "html")
	end switch
	if(file =& null)
		ret
	end if
	do @lockEditor(true)
	var fileName: []char :: file@delExt(file@fileName(file))
	var tmp: []char :: wnd@sysDir(%appData) ~ "Kuin/" ~ \src@addRunningFileName() ~ "/" ~ fileName ~ "/"
	var ext: []char
	switch(sourceCodeKind)
	case %cpp
		do ext :: ".cpp"
	case %web
		do ext :: ".html"
	end switch
	var out: []char :: tmp ~ fileName ~ ext
	try
		do file@makeDir(tmp)
	catch
		var msg: []char
		if(\common@langEn)
			do msg :: "Could not delete. " ~ tmp
		else
			do msg :: "削除できませんでした。 " ~ tmp
		end if
		do wnd@msgBox(@wndMain, msg, \common@title, %err, %ok)
		ret
	end try
	do \src@docs.forEach(@fixAll, null)
	do @updateState()
	if(\dll@interpret2Running())
		do \dll@waitEndOfInterpret2()
	end if
	do \dll@resetMemAllocator()
	do @editLog.setText("")
	try
		do \src@resetErrList()
		var option: list<[]char> :: #list<[]char>
		do option.add("-i")
		do option.add(\src@mainSrcPath)
		do option.add("-o")
		do option.add(out)
		if(@iconPath <> "")
			do option.add("-c")
			do option.add(@iconPath)
		end if
		do option.add("-r")
		switch(sourceCodeKind)
		case %cpp
			do option.add("-e")
			do option.add("cpp")
		case %web
			do option.add("-e")
			do option.add("web")
			do option.add("-x")
			do option.add("merge")
		end switch
		if(\dll@build(option.toArray(), \src@getSrc, @log))
			if(file@copyFile(file, out))
				do wnd@msgBox(@wndMain, \common@langEn ?("The build succeeded.", "ビルドが成功しました。"), \common@title, %info, %ok)
				do \src@delRunningFiles()
			end if
		end if
		do \src@updateErrList()
	catch
		do wnd@msgBox(@wndMain, \common@langEn ?("Unexpected error.", "予期せぬエラーです。"), \common@title, %err, %ok)
	end try
	do @updateUi()
	do @lockEditor(false)
end func

+func listFileOnSel(wnd: wnd@WndBase)
	var sel: int :: @listFile.getSel()
	if(sel <> -1)
		var src: []char :: \src@removePrefix(@listFile.getText(sel))
		if(^src > 0 & src[0] = '\\')
			var doc: \doc@Doc :: \src@docs.get(src, &)
			if(doc <>& null)
				do \src@setCurSrc(doc)
			end if
		end if
	end if
	do @updateUi()
end func

+func updateFile()
	do @editFile.setText("")
	
	do @listFile.setRedraw(false)
	do @listFile.clear()
	do \src@docs.forEach(callback, null)
	do @listFile.setRedraw(true)
	
	func callback(src: []char, doc: \doc@Doc, data: kuin@Class): bool
		if(src[0] <> '\\')
			ret true
		end if
		var prefix: []char :: ""
		if(doc =& \src@curDoc)
			do prefix :~ ">"
			do @editFile.setText(src)
		end if
		if(doc.getChanged())
			do prefix :~ "*"
		end if
		do @listFile.add(prefix ~ src)
		if(doc =& \src@curDoc)
			do @listFile.setSel(@listFile.len() - 1)
		end if
		ret true
	end func
end func

+func updateUi()
	do @lockUi :: true
	do @updateFile()
	do \src@curDoc.updateUi()
	do \src@curDoc.updateScrollBar()
	do @chkRbArSnap.setChk(@snap)
	do @editRbArSnap.setEnabled(@snap)
	do @editRbArSnap.setText(@snapValue.toStr())
	do @editRbArZoom.setText(@zoom.toStr())
	
	do @menuMain.delPopup(@popupMainArranger)
	if(\src@curDoc =$ \doc_gen@DocGen)
		if((\src@curDoc $ \doc_gen@DocGen).designer =$ \doc_ar@DocAr)
			do @menuMain.insPopup(@popupMainHelp, \common@langEn ?("&Arranger", "アレンジャー(&A)"), @popupMainArranger)
		end if
	end if
	do @wndMain.updateMenu()
	
	do @lockUi :: false
end func

func lockEditor(lock: bool)
	do @lockingEditor :: lock
	do @btnCompile.setEnabled(!lock)
	do @btnRls.setEnabled(!lock)
end func

+func paintDrawEditor(immediate: bool)
	if(immediate)
		do @drawEditor.paint()
		do @redrawingRequired :: false
	else
		do @redrawingRequired :: true
	end if
end func

+func focusDrawEditor()
	do @drawEditor.focus()
end func

func addEnv(option: list<[]char>)
	if(@radioEnvWnd.getChk())
		do option.add("-e")
		do option.add("exe")
		do option.add("-x")
		do option.add("wnd")
	elif(@radioEnvCui.getChk())
		do option.add("-e")
		do option.add("exe")
		do option.add("-x")
		do option.add("pause")
	end if
end func

+func getEnv(): []char
	if(@radioEnvWnd.getChk())
		ret "wnd"
	elif(@radioEnvCui.getChk())
		ret "cui"
	end if
	ret "wnd"
end func

+func setEnvDirectly(env_: []char)
	do @lockUi :: true
	do @radioEnvWnd.setChk(false)
	do @radioEnvCui.setChk(false)
	switch(env_)
	case "wnd"
		do @radioEnvWnd.setChk(true)
	case "cui"
		do @radioEnvCui.setChk(true)
	end switch
	do @lockUi :: false
end func

func log(args: [][]char, row: int, col: int)
	var msg: []char :: \common@nullStr(args[0]) ~ ": " ~ \common@nullStr(args[1])
	if(args[2] =& null)
		do @editLog.addText(msg ~ "\n")
	else
		do @editLog.addText(msg ~ " (" ~ \common@nullStr(args[2]) ~ ": " ~ row.toStr() ~ ", " ~ col.toStr() ~ ")\n")
	end if
	var pos: \src@Pos :: #\src@Pos
	do pos.src :: args[2] =& null ?("", ##args[2])
	do pos.row :: row
	do pos.col :: col
	do \src@addErrList(pos, args[0], args[1], args[2], row, col)
end func

func logForInterpret(args: [][]char, row: int, col: int)
	var pos: \src@Pos :: #\src@Pos
	do pos.src :: args[2] =& null ?("", ##args[2])
	do pos.row :: row
	do pos.col :: col
	do \src@addErrList(pos, args[0], args[1], args[2], row, col)
end func

+func getLockingEditor(): bool
	ret @lockingEditor
end func

+func showMsgRunning()
	do wnd@msgBox(@wndMain, \common@langEn ?("The program is running.", "プログラムが実行中です。"), \common@title, %err, %ok)
end func

+func dragging(): bool
	ret @drag
end func

func openResFolder()
	if(\src@mainSrcDir = \common@defaultDir)
		do wnd@msgBox(@wndMain, \common@langEn ?("The main source file must be saved before adding another file.", "ファイルを追加する前にメインソースファイルを保存しなければなりません。"), \common@title, %err, %ok)
		ret
	end if
	var path: []char :: file@dir(\src@mainSrcDir) ~ "res/"
	if(!file@exist(path))
		if(!file@makeDir(path))
			do wnd@msgBox(@wndMain, \common@langEn ?("Failed to create res folder.", "resフォルダの作成に失敗しました。"), \common@title, %err, %ok)
			ret
		end if
	end if
	do task@open(path)
end func

func fixAll(key: []char, value: \doc@Doc, data: kuin@Class): bool
	do value.fix(false)
	ret true
end func

+func updateState()
	if(@redrawingRequired)
		do @drawEditor.paint()
		do @redrawingRequired :: false
	end if
	if(@interpret2Required & !\dll@interpret2Running())
		do \src@resetErrList()
		do \dll@resetMemAllocator()
		var option: list<[]char> :: #list<[]char>
		do option.add("-i")
		do option.add(\src@mainSrcPath)
		do option.add("-x")
		do option.add("hint")
		do @addEnv(option)
		var prioritizedCode: []char :: \src@curDocName
		var pos: int :: prioritizedCode.find('.', -1)
		if(pos <> -1)
			do prioritizedCode :: prioritizedCode.sub(0, pos)
		end if
		do \dll@interpret2(option.toArray(), \src@getSrc, @logForInterpret, complete, prioritizedCode)
		do @interpret2Required :: false
	end if
	if(@completionRequired)
		do \src@updateErrList()
		do @updateUi()
		do @completionRequired :: false
	end if
	
	func complete()
		do @completionRequired :: true
	end func
end func

+func callInterpret2()
	do @interpret2Required :: true
end func

func makeRelatedFileText(txtPath: []char, option: list<[]char>)
	if(^@relatedFiles = 0)
		ret
	end if
	var writer: file@Writer :: file@makeWriter(txtPath, false)
	if(writer =& null)
		ret
	end if
	do @relatedFiles.head()
	while(!@relatedFiles.term())
		var inPath: []char :: @relatedFiles.get()
		do writer.writeStr(inPath ~ "\n")
		do writer.writeStr("data/" ~ file@fileName(inPath) ~ "\n")
		do @relatedFiles.next()
	end while
	do writer.fin()
	do option.add("-f")
	do option.add(txtPath)
end func
