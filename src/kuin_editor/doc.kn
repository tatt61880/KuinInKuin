+class Doc()
	*func ctor()
		do me.changed :: false
	end func
	
	+func fin()
		do me.undo :: null
	end func
	
	+func fix(first: bool)
	end func
	
	+func load(path: []char, sys: bool): bool
	end func
	
	+func save(path: []char): bool
	end func
	
	+func getSrc(): [][]char
	end func
	
	+func draw(width: int, height: int)
	end func
	
	+func mouseDownL(x: int, y: int)
	end func
	
	+func mouseUpL(x: int, y: int)
	end func
	
	+func mouseDoubleClick(x: int, y: int)
	end func
	
	+func mouseMove(x: int, y: int)
	end func
	
	+func focus(isFocus: bool)
	end func
	
	+func updateScrollBar()
	end func
	
	+func keyDown(key: wnd@Key, shiftCtrl: wnd@ShiftCtrl): bool
	end func
	
	+func keyUp(key: wnd@Key, shiftCtrl: wnd@ShiftCtrl)
	end func
	
	+func keyChar(key: char)
	end func
	
	+func scrollX(pos: int)
	end func
	
	+func scrollY(pos: int)
	end func
	
	+func wheelX(wheel: int)
	end func
	
	+func wheelY(wheel: int)
	end func
	
	+func setMouseImg(): wnd@MouseImg
	end func
	
	+func cmdUndo()
	end func
	
	+func cmdRedo()
	end func
	
	+func cmdCut()
	end func
	
	+func cmdCopy()
	end func
	
	+func cmdPaste()
	end func
	
	+func cmdDel()
	end func
	
	+func cmdSelAll()
	end func
	
	+func undoImpl(undo2: @UndoCmd)
	end func
	
	+func getSelCode(): []char
	end func
	
	+func getCursorWord(): []char
		ret null
	end func
	
	+func updateUi()
	end func
	
	+func onEvent(event: @Event)
	end func
	
	+func getChanged(): bool
		ret me.changed
	end func
	
	+func setChanged(value: bool)
		do me.changed :: value
	end func
	
	var changed: bool
	var undo: undo@Undo
end class

+enum Event
	listLtOnMouseClick
	listLbOnMouseClick
	listLbOnMoveNode
	listRbOnMouseClick
	editRbArNameOnKillFocus
	chkRbArVisibleOnPush
	editRbArXOnKillFocus
	editRbArYOnKillFocus
	editRbArWidthOnKillFocus
	editRbArHeightOnKillFocus
	btnRbArPropOnPush
end enum

+class UndoCmd(undo@Cmd)
	+var doc: @Doc
end class
